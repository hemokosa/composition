\NeedsTeXFormat{pLaTeX2e}\documentclass[oneside]{jbook}
\usepackage{numberpar}\pagestyle{plain}\flushbottom%\raggedbottom\textheight 23.5cm\textwidth 15cm\textfloatsep 30pt plus 3pt minus 6pt\parskip 7.5pt plus 1pt minus 1pt\oddsidemargin 10mm\evensidemargin 10mm\topmargin -5mm\headheight 12pt%\headsep 0mm\parindent 0mm\title{デジタル・マテリアリズム ― A New Kind of (Digital) Art}\author{久保田晃弘}\date{\today}\begin{document}\maketitle%\tableofcontents

\setcounter{chapter}{-1}
\chapter{素材としてのコンピュータ\\{\Large 数と知覚のインターフェイス}}
\numberpars

本書は、デジタル（数字列）を素材と捉え、
そこから映像や音響、テキストといったさまざまな形式の表現を並列的に生成する
デジタル・マテリアリズムというコンセプトと、
マトリックス・スキャン・システムによる
リアルタイム映像音響表現について述べたものである。

あらゆる形式の表現は、数の下で等価になる。
デジタル・マテリアリズムは視覚的、聴覚的な造形要素を数字列へ還元することによる汎知覚的な表現手法である。
時間や空間におけるフォルムや色彩、リズムや音色、ヴォリュームやダイナミズムを、
素材と知覚の両面から抽象することで、
素材とさまざまな知覚を結びつけるオルターナティヴなインターフェイスを探索する。
それはいわば、コンピュータによる新たな知覚のエミュレーションである。

数字列の世界は、そのままでは知覚することができない。
数字列を知覚するためには、数字列を音や光にアナログ化（知覚化）する必要がある。
逆に物理世界において知覚可能な音や光を、
何らかのデバイスによってデジタル化（数値化）すれば、
コンピュータの中で自在に操作することが可能になる。

デジタル・マテリアリズムにとって、
この数の知覚化と知覚の数値化という「数と知覚のインターフェイス」が重要である。

映像と音響を考えるということは、
視覚と聴覚、そして空間と時間を考える、ということでもある。
デジタル・マテリアリズムのアプローチは、
音響に映像を付随させるのでも、映像に音響を付随させるのでもなく、
映像と音響の両者を、数字列という共通の素材から同時かつ相互作用的に生み出していく。
それは同時に、デジタル表現の本性を素材レベルからもう一度問い直す、
ポスト・デジタル時代の制作手法でもある。

数字列という同一の素材から生成された映像と音響は、
両者の実体が同じであるにもかかわらず、視覚と聴覚という異なる知覚の回路を並走させる。
異なる知覚回路の並走に着目することで、
一つの素材から複数の知覚が引き起こされる「共素材」表現の可能性を、
「数と知覚のインターフェイス」という観点から探究する。

\nonumberpars
\chapter{メタメディア\\{\Large 3つのメディア抽象}}
\numberpars

音響と映像といった複数のメディアによる表現を、
同一のプラットフォーム上で、
統合的に生成したり操作変換することを、メタメディア表現と呼ぶ。

デジタル素材によるメタメディア表現とは、
さまざまな形式のメディアによる表現を数によって抽象（メディア抽象）し、
統合的、相互作用的に操作生成することである。

デジタル・マテリアリズムにおけるメディア抽象には、以下の3つのレベルがある。

\begin{description}
\item[パラメータ抽象] 属性による抽象\item[マテリアル抽象] 数字列（素材）そのものによる抽象
\item[スペクトル抽象] 振動（周波数領域）による抽象
\end{description}

パラメータ抽象とは、表現の属性としてのパラメータを、
それらがもともと有していた意味から切り離して、
別の意味のパラメータとして使用することである。

例えば、映像から抽出した物体の位置（というパラメータ）によって、
音のパラメータ（周波数や振幅など）を変える、音の振幅（大きさ）によって背景の色を変化させる、
といった手法がこのパラメータ抽象にあてはまる。

マテリアル抽象は、ビットマップイメージやPCMサウンドファイル、
あるいは文字コード列をなどのデータを、
数字列にファイルフォーマットを適用することで直接生成したり、
音響から映像へ、あるいは映像から音響へと、
他の形式に転用してしまうことである。

画像データのヘッダー編集によるサウンドファイル化や、
ヘッダー付加による任意のデータの音響化や映像化といった
デジタルデータの直接操作（ハッキングあるいはデータベンディング）も、
このマテリアル抽象のシンプルな事例である。

スペクトル抽象は、時空間領域におけるさまざまな形式のデータを、
フーリエ変換によって周波数領域に変換し、
そこで表現の操作や相互変換を行うことである。
いいかえれば、表現の「振動」による抽象である。
周波数領域での操作は、聴覚や視覚といった知覚の特性とも深く関係している。

\nonumberpars
\chapter{グリッドとラスタスキャン\\{\Large マテリアリズムの根源}}

\begin{quote}
\textbf{グリッドはモダニズムの視覚芸術における野心の象徴である。}ロザリンド・クラウス\cite{kraus94}
\end{quote}


\numberpars

デジタル表現にとって、グリッド（格子）は最も基本的なメカニズムである。

グリッドの構成要素は有限のドットであり、
逆にドットを2次元の平面に縦横に敷き詰めたものがグリッドである。
ドットという小さなパーツが整然と集まることで、
グリッドという大きな全体が構成される。

グリッドは数の平面化、空間化の基本であり、
数と視覚を結びつけるインターフェイスでもある。

2次元（以上の）グリッドを走査線（ラスタ）を用いてスキャンすることで、
空間上のグリッドを時間軸上に展開することができる。
逆に、時間軸上のデータをラスタスキャンによって空間化することができる。

ラスタの速度によって、展開されたデータのサンプリング時間をコントロールすることができる。

デジタル・マテリアリズムは、
シンプルなグリッドとラスタスキャンから、
コンピュータの量と速度によって生み出される、新たな質に着目する。

グリッドとラスタスキャンはマテリアリズムの根源である。

\nonumberpars
\chapter{マトリックス・スキャン・システム\\{\Large 2つの時間}}
\numberpars

数をグリッド状に配置したものがマトリックスである。
マトリックスはデジタル・マテリアリズムによる制作手法の基本データ型である。
マトリックスというデータ型によって、数という素材を組織化する。

さらに、マトリックスを平面化（2次元化）することで、
ビットマップグラフィックスとして数を視覚化することができる。

マトリックスをラスタスキャンによって時間化することで、
デジタルオーディオとして数を聴覚化することができる。

マトリックスをベースに、数を知覚化するシステムを
「\textbf{マトリックス・スキャン・システム}（mss）」と呼ぶ。

このマトリックス・スキャン・システムには、2つの時間が共存している。
ひとつは「連続的な時間」と呼ばれるミクロな時間スケールである。
これはオーディオレート、すなわち数万Hzのオーダーの
音のサンプリング時間（音響）のスケールで、
マトリックスのスキャンレートがこの時間に対応している。

もうひとつは「離散的な時間」と呼ばれるマクロな時間スケールがある。
これは映像のフレームレートや音楽のコントロールレートといった、
数～数十Hzのオーダーの時間スケールで、
マトリックスデータの更新速度がこの時間に対応している。

今回用いる、マトリックス・スキャン・システムのポイントは、
この2つの時間スケールが一つのシステムの中で混在していることにある。
いいかえれば、連続的な時間スケールと離散的な時間スケールを、
1つのシームレスな枠組みの中で扱うことで、
音響合成におけるミクロな時間と、
映像生成/音楽構成におけるマクロな時間を結びつけている。

本書で用いるマトリックス・スキャン・システムに関する基本データは以下の通りである。

\begin{itemize}
	\item ビットマップグラフィックス
	\begin{itemize}
		\item $512 \times 512 ＝ 262144 (dots/plane)$ 基本キャンバスのサイズ
		
	\end{itemize}
	\item デジタルオーディオ
	\begin{itemize}
		\item $44100 (samples/sec)$ 基本サンプリング周波数
		\item $262144 \div 44100 ＝ 5.9443(sec/plane) ＝ 0.1682(Hz))$ 1面あたりのスキャン時間
		\item $5.9443 \div 512＝11.61(msec/line) ＝ 86.1328(Hz)$ 1ラインあたりのスキャン時間			\end{itemize}
	\item マトリックスのサイズ（1面あたり）
	\begin{description}
		\item[8ビット符号なし整数(char) ] $262144 (byte) = 256K(byte)$
		\item[32ビット符号なし整数(long) ] $1048576 (byte) = 1M(byte)$
		\item[32ビット浮動小数点(float32) ] $1048576 (byte) = 1M(byte)$
		\item[64ビット浮動小数点(float64) ] $2097152 (byte) = 2M(byte)$
	\end{description}
\end{itemize}

\nonumberpars
\chapter{ドット/テクスチャー/サーフェス\\{\Large 素材のレイアウト}}
\numberpars

数と直接的に対応しているグリッド上のドットは、
それ以上分割し得ない表現の基本単位（アトム）である。ドットをグリッド上に隣接して配置することでテクスチャーが生まれる。テクスチャーはサーフェスとして知覚される。ドットというミクロな要素を出発点として、そこからドット→テクスチャー→サーフェスと表現をマクロ化（粗視化）していく。クリックの連鎖によって知覚的に連続的な音の波形が生まれる。
さまざまな波形はトーン（音色）として知覚される。
サウンドの場合も、クリックを出発点として、
クリック→ウェイブ→トーンと表現をマクロ化する。
その出発点においてイリュージョンを必要としないデジタル・マテリアリズムの手法は、
通常の3DCGのような遠近法的、オブジェクト的なアプローチとも、
構成主義的な幾何学的抽象のアプローチとも異なる。

ドットの配置として生み出され、光の配列として知覚されるサーフェスそれ自体には、
幾何学的なオブジェクトも、遠近法的な奥行きも、
２元的な図と地の関係や固定したフォルムも存在しない。
そこにあるのは、フラットな面とオールオーバーな光の場、そしてそれを知覚する身体のみである。

\nonumberpars
\chapter{書き込みと消去\\{\Large 生成と消滅のレゾナンス}}
\numberpars

マトリックス・スキャン・システムにおける、もっともシンプルな操作として、
マトリックスにデータを書き込む、あるいは消去するシステムを考える。

非リアルタイム書き込み（消去）
リアルタイム書き込み（消去）

グリッドと反復

定数の書き込み

消去＝ゼロの書き込み

サイン波の書き込み

グリッチの活用書き込む/消去する速度をしだいに速くしていく読み出す速度をしだいに速くしていく

\nonumberpars
\chapter{リ/インター・アクション\\{\Large 反応するサーフェス}}
\numberpars

ディスプレイはコンピュータのアルゴリズムが機能する場である

サーフェス上でのアクションがテクスチャーに反映される＝リアクション

テクスチャーの変化が次のアクションを生み出す＝インタラクション

アクションそのものを重視する＝デジタル・アクション・ペインティング

人間の直観的な操作によってリアルタイムに生み出される視覚表現を追求する。

パフォーマンス/ハプニング

微小な操作の違いが大きな結果の差を生み出す。

インターフェイスの感度＝時間や空間のスケールに相当する。

インタラクション

パラメータの操作→パラメータ抽象によるインターフェイス

マトリックスへのデータ書き込み
スキャン位置のコントロールパラメータのコントロール

\nonumberpars
\chapter{空間音響\\{\Large 並列するシステム}}
\numberpars

\begin{quote}
\textbf{時間の空間化ではなく、空間の時間化、あるいは、時空間以外のものの時間化について考えること。}高松次郎\cite{takamatsu03}
\end{quote}


ムービーとサウンドのデータ構造はコンプリメンタリな関係にある

ムービー：空間的な稠密さが必要、時間的には粗くてもよい（離散的時間）
スクリーンとフレーム→空間システムの並列化

サウンド：時間的な稠密さが必要（連続的時間）、空間的には粗くてもよい
トラックとチャンネル→時間システムの並列化

ステレオ2chデュアル・スキャン（周波数、位相→エコー）クロス・スキャンオポジット・スキャンデュアル・マトリックス

\nonumberpars
\chapter{カラーフィールド\\{\Large 知覚の抽象}}
\numberpars

色彩によって作られる場を考える
cf.反応する場（インタラクション）
　観るもの包み込む場

色彩の表現
ドットからピクセルへ

この色情報をもったドットのことを、
ピクチャー（picture）とエレメント（element）からなる造語の
「ピクセル（画素）」という。

ピクセル（pixel、画素）デジタル画像を構成する単位である、色のついた「点」

RGB＝素材の側からの抽象
HSL＝知覚の側からの抽象

\nonumberpars
\chapter{フィードバック\\{\Large 反復から生成へ}}
\numberpars

フィードバック・ループ

マクロな（レイアウトの）操作

変形（操作）	拡大/縮小	回転	反転	分割	接合	移動（カット＆ペイスト）


セルラ・オートマトン

自律するビットマップ

ローカル（ミクロ）なドット毎の操作
隣接するドット間の操作
→グローバル（マクロ）な変化の創出

ミクロ・メゾ・マクロ

メゾレベル（メゾスケール）の重要性

\nonumberpars
\chapter{スペクトル\\{\Large 振動による抽象}}
\numberpars

周波数領域

スペクトルと抽象

振動

フーリエ変換

\nonumberpars
\chapter{マイクロノイズ\\{\Large ポスト＝デジタル美学の探究}}
\numberpars

ノイズとグリッドは無国籍＝インターナショナルである。

ポスト＝デジタル美学の出発点

質より量
ミニマルからマイクロへ
素材の可能性から知覚の可能性へ




\nonumberpars
\begin{thebibliography}{99}\bibitem{kraus94}ロザリンド・E・クラウス『オリジナリティと反復』小西信之訳，リブロポート，1994．

\bibitem{takamatsu03}高松次郎『世界拡大計画』水声社，2003．


\end{thebibliography}\end{document}



\section{デジタル/コンピュータ}

今日のデジタル・コンピュータは、デジタル、すなわち数の塊である。

コンピュータの中では、グラフィックス、ムービー、サウンド、テキストといった
さまざまな形式が数値の集まり（数字列）として表現されている。

あらゆる形式の表現は、数の下で等価になる。
だとすれば、コンピュータ、すなわちデジタル領域で創作するということはどういうことか。
そこにはどういう意味があり、どういう可能性があり、
そしてどういう方法論があり得るのか？

このテキストの目標は、あるひとつの方法論によって、
デジタル表現がその本性として内包している、
新たな表現の可能性を引き出すことである。

そのために、この数の塊としてのコンピュータを、
道具（ツール）ではなく素材（マテリアル）と捉えることから出発する。

コンピュータを素材と考えることで、
映像や音響、テキストといったさまざまな形式の表現プロセスや構成手法を、
デジタル―すなわちコンピュータの中の膨大な数字列という、
マテリアルのレベルにまで抽象し、
既存のさまざまな表現と形式を解体/再構築することを試みる。

このアプローチを「デジタル・マテリアリズム（唯物論）」と呼ぶ。

\section{メタファー}

創作は何かのシミュレーションではない。
コンピュータも何かのメタファーではない。

素材にメタファーは必要ない。
木や石を何かのメタファーで語ったりはしない。
木は木、石は石だ。木は石になれないし、コンピュータは鉄にはなれない。

メタファーを用いずに、数字列という素材と直接かかわりながら発想することが必要である。
そのためにはまず、数字列を直接操作（ハック）するところから始めなければならない。

数字列から発想する際には、デジタル化よりもアナログ化のプロセスが鍵になる。
表現を如何に数字列に変換するか、よりも
数字列を如何に表現に変換するか、が重要になる。

デジタル表現でしかできないことは何か？

デジタルでなければできないこと、
デジタルでもできること、
デジタルではできないこと、
それらを混同させてはいけない。

\section{数と知覚のインターフェイス}

数字列の世界は、そのままでは知覚することができない。
だから数字列のアナログ化とはすなわち、数字列の知覚化に他ならないし、
逆に知覚をデジタル化、数値化する必要もある。

デジタル・マテリアリズムにとって、最も需要なインターフェイスは
この、数の知覚化、知覚の数値化、という数と知覚のインターフェイスである。

数字列を知覚化することで、数と知覚の世界がつながれば、
両者の相互関係、つまり数字列の変化が知覚にあたえる効果と、
知覚の変化が数字列に与える影響をじっくりと探索する事ができる。

数と知覚という2つの相異なる世界のインターフェイスを実験、探究、考察し、
そこから新たな表現や概念を生み出していくこと
―それが僕がこの本で取り上げる、デジタル・マテリアリズムの核心である。

\section{共素材}

このテキストでは、さまざまな表現の中から主に、
映像と音響という2つの形式を取り上げる。

映像と音響と考える、ということは
視覚と聴覚、そして空間と時間を考える、ということでもある。

音響に映像を付随させるのでも、映像に音響を付随させるのでもなく、
映像と音響の両者を、数字列という共通の素材から同時かつ相互作用的に
生み出していく方法から出発する。

数という同一の素材から生成された映像と音響は、
両者の実体が同じであるにもかかわらず、
視覚と聴覚という異なる知覚の回路を並走させる。

異なる知覚回路の並走に着目することで、
一つの感覚の刺激によって複数の知覚が引き起こされる「共感覚」ではなく、
一つの素材からの表現によって複数の知覚が引き起こされる
「共素材」の可能性を露わにしたいと考えている。

\section{メタメディア}

音響と映像といった複数のメディアによる表現を、
同一のプラットフォーム上で、
統合的に生成したり操作変換することを、メタメディア表現と呼ぶ。

デジタル素材によるメタメディア表現とは、
さまざまな形式のメディアによる表現を、
数字列という素材によって抽象することである。

このメディア抽象には、次の3つのレベルがある。
\begin{itemize}
\item パラメータ抽象
\item マテリアル抽象
\item スペクトル抽象
\end{itemize}

\subsubsection{パラメータ抽象}
映像表現におけるフォルムや色彩、
音響表現における音高や強度、音価は、
座標やRGB値、周波数や振幅、時間といったパラメータで表現されている。

パラメータ抽象とは、この表現を抽象するさまざまなパラメータを、
純粋な数値としてもともと有していた意味を分離し、
それを異なる意味のパラメータとして使用することである。

例えば、映像から抽出した物体の位置によって音の高さや音量を変更する、音の振幅によって背景の色を変化させる、
といった手法がこのパラメータ抽象にあてはまる。

\subsubsection{マテリアル抽象}
マテリアル抽象とは、
表現の属性としてのパラメータではなく、
ビットマップイメージやPCMサウンドファイル、あるいは文字コード列を、
数字列にファイルフォーマットを適用することで直接生成したり、
音響から映像へ、あるいは映像から音響へと、
そのまま他の形式に転用/変換してしまうことである。

画像データのヘッダー編集によるサウンドファイル化やその逆の変換、
システムファイルやアプリケーションファイルの16進ダンプや
ヘッダー付加による音響化や映像化などが、
このマテリアル抽象のシンプルな事例にあたる。

\subsubsection{スペクトル抽象}

スペクトル抽象とは、時空間領域におけるさまざまな形式のデータを、
フーリエ変換によって周波数領域のデータにすることで、
表現を正弦波の「振動」に抽象し、
周波数という抽象された領域で操作や相互変換を行うことである。

この周波数領域での操作は、聴覚や視覚といった知覚の特性とも深く関係しているため、
数と知覚のインターフェイスの知覚側からのアプローチにとって、
重要な手法であるといえる。

\section{フォルム}

数を画像、すなわち数を空間を結びつける方法には、
大きくわけてラスタ・スキャン方式によるラスタ・グラフィックスと、
ベクタ・スキャン方式によるベクタ・グラフィックスの2つの形式がある。

ラスタ・グラフィックスとは、画像を、
色のついた点（ドット/ピクセル）の羅列として表現したものである。
別名で「ビットマップ・グラフィックス」ともいう。

ビットマップの本来の意味は、
ドットにアドレスをつけてデータ管理をする方法のことである。
画像表現においては、0/1のビット列を順に方眼紙のようなグリッド（格子）に対応させ、
あるグリッドに対応するビットが0ならばそのドットは白、1ならば黒として、
ドットの白黒、すなわち点の有無で画像を表現する方式のことを指す。

一方、ベクタ（ベクトル）・グラフィックスとは、
画像を、点の座標とそれを結ぶ線や面の方程式のパラメータ、
そして塗りつぶしや特殊効果などの描画情報の集合として表現したものである。

ラスタ・グラフィックスは前述のマテリアル抽象に適しており、
ベクタ・グラフィックスはパラメータ抽象に適している。

\section{カラー}

白黒のビットマップ・グラフィックスに色の情報を付加するためには、
ひとつひとつのドットが、
光の3原色である RGB（赤、緑、青）の明るさに関する数値データを持てば良い。

この色情報をもったドットのことを、
ピクチャー（picture）とエレメント（element）からなる造語の
「ピクセル（画素）」という。
RGB表現は数と色を結び付ける、変換モデルのひとつである。
RGB をすべて重ねると白色になることから、
RGB のことを「加法混合」と呼ぶ
\footnote{一方、絵具の混合のように吸収を使った色の合成方法を
「減法混合」と呼んでいる。減法混合の3原色は、
RGBの補色であるCMY（シアン、マゼンタ、黄）である。 }。\section{サウンド}

数と音、すなわち数と時間を結びつけるもっともシンプルな方法は、
PCM（パルス・コード・モジュレーション）という形式である。
これは、音の波形を一定時間ごとに数値化（サンプリング）して記録したもので、
いわば音のラスタ・スキャンによる1次元ビットマップである。

一方で、通常の楽譜やMIDIシンセサイザーのように、
音の高さや長さ、音量や音色をコントロールするパラメータによる音の表現は、
音のベクタ表現ということができる。

ビットマップ表現としてのサウンドデータと聴覚の関係は、
1秒間に何回数値化するか（サンプリング周波数）と、
1つのデータを何ビットの数値で表現するか（量子化ビット数）という
2つのパラメータで決まる。

例えば音楽CDの場合、
サンプリング周波数は44.1kHz（1秒間に44100回)、
量子化ビット数は16ビット（0～65535の65536段階）である。

\section{テキスト}

数とテキスト（文字列）は、
数と文字の対応表である「文字コード（符号）」によって結びつけられる。
文字コードとは、個々の文字や記号に割り振った数のことである。
文字コードを介して数字列から文字列を生み出すことも、文字列を数字列に変換することもできる。ひとつひとつの文字や記号に、何バイトの数を対応させるかによって、
いくつの文字を数で表現できるかが決まってくる。
7ビットの数に文字を対応させると、128個の文字を扱うことができる。
16ビットの数を用いれば、65536個の文字を扱うことができる。あまり多くの文字数を必要としない英数字の文字コードには、
通常7ビットの数が用いられる。
日本語や中国語、韓国語のように漢字をつかう言語の場合、
文字の数が多いため、16ビットの文字コードが用いられる。
\section{ベクタとラスタ}

メタメディア表現には、
パラメータ、スペクトル、マテリアルという3つの抽象レベルがあり、
数と表現を結びつける方法には、大きくわけてラスタ方式とベクタ方式の2つがある。
この本のテーマであるデジタル・マテリアリズム、
そして数と知覚のインターフェイスという視点からは、
数の側からはマテリアル抽象、知覚の側からはスペクトル抽象によるアプローチが、
特に重要なポイントとなる。

ベクター方式のモデルは、パラメータそれ自体が抽象の結果なので、
パラメータ抽象のレベルでのメタメディア化にとどまる。
それに対して、核となる素材データとしての数字列をラスタ・スキャンでリニアに組織化すれば、
マテリアル/スペクトル抽象という直接的な方法で、さまざまな形式の表現を、
並列かつダイナミックに生成することができる。
メタメディア表現にとっては、ベクタ方式よりラスタ方式のモデル方が、より柔軟かつ本質的である。

\nonumberpars\chapter{探求}

\numberpars

\section{創作と素材}

創作の基本は素材を知ることである。
どんな表現者にとっても、表現の素材に対峙しその本性や特徴を知り、
そこにスキルを働かせる術を身につけることが、
すぐれた表現のためは欠かせない。

表現は素材との対話から生まれる。
人間が素材を操作し、同時に人が素材に導かれる。
デジタルという素材の特徴をいかに生かすか。
素材と人間の距離感が重要である。

コンピュータをはさみや包丁といった道具ではなく、紙や木、金属や石といった素材と並べてみるとどうなるか。
コンピュータが持っている機能や性能、使いやすさ以外の特徴に
着目してみよう。


\section{ドット}

デジタル素材のアトム（原子）はひとつの数である。

一つの数は、画像であれば1つのドット、
サウンドであれば1つのクリック、
テキストであれば1つの文字に相当する。

アナログな数学の世界における点（ポイント）は、
大きさや面積を持たない観念的な概念である。

しかしデジタル表現のアトムとしてのドットやクリックは、
大きさや面積、あるいは時間をもった有限の実体である。
大きさのない点、幅のない線、
あるいは無限大や無限小、極限や無理数、瞬間といった
数学的な諸概念とは異なる。
ドットには有限の大きさや面積があるし、クリックには有限の時間がある。

\section{ライン}

ドットを一列に並べるとラインになる。
ラインは数を一次元に順序づけることである。
ラインのことをリストともいう。

ラインは、数字列を組織化する、
もっともシンプルな方法である。
前述のラスタ・スキャン方式は、大量のドット/クリックを
ラインという方法で組織化することに他ならない。

特にドットを時間軸上に配置するサウンド表現においては、
このラインというデータの組織化がアナログ化の基本となる。

\section{グリッド}

%\begin{quote}
%グリッドはモダニズムの視覚芸術における野心の象徴である。\cite{kraus94}
%\end{quote}

ドットを2次元の平面に縦横に敷き詰めたものがグリッド（格子）である。
グリッドは数のグラフィック化、空間化の基本である。

モダニズムの視覚表現にとって、グリッドは基本的なメカニズムである。
ドットという小さなパーツが整然と集まることで、
グリッドという大きな全体が構成される。
グリッドとラスタ・スキャン（ライン）はマテリアリズムの根源である。

\section{マトリックス}

2次元のグリッドを任意の次元に拡張した一般型をマトリックスという。
ラインは1次元のマトリックス、グリッドは2次元のマトリックスである。

グリッドとラインがマテリアリズムの根源であるとすれば、
マトリックスはマテリアリズムの可能性である。

ライン構造としてのサウンド・データ、
グリッド構造としてのグラフィック・データを
マトリックスという一般構造で抽象することで、
「はじめに数ありき」というデジタル・マテリアリズムの
方法論を具体化することが可能になる。

\section{量}

デジタル表現にとって最も重要なのは、その量である。
メモリーやハードディスクなどのコンピュータの記憶容量を表す際に
用いられる「メガ」や「ギガ」とは、

\begin{itemize}
\item メガ＝1024×1024＝1048576（約100万）
\item ギガ＝1024×1024×1024＝1073741824（約10億）
\end{itemize}

といった膨大な量に他ならない。

デジタル表現における質は量によってつくられる。
「質より量」それがデジタル表現の基本原理である。

\section{速度}

メガやギガといった単位は量だけで用いられている訳ではない。
同じ単位が速度にも用いられる。

例えば、コンピュータのプロセッサの速度を表す際に、
メガヘルツ（MHz）やギガヘルツ（GHz）という単位が用いられるが、
これはそれぞれ、一秒間に100万回、10億回の処理を行う、という
ことでもある。

10億分の1秒、というのは1秒間に地球の周りを7回半回る光が、
30cmしか進むことのできない時間である。

速度も一種の量である。ここにも「量より質」の原則が働いている。

\section{正確さ}

数によって生み出されるものに、まず表現の「正確さ」がある。
数は定量的に取り扱うことができる。
数は何度コピーしても、その値は変わらない。

デジタル表現は何度コピーしても変化しない。

\section{精密さ}

正確さは「精密さ」を生み出す。

\section{微小さ}

精密さは「微小さ」を生み出す。

\section{極端さ}

微小さは「極端さ」を生み出す。

\section{直接操作}

数を操作することによって、
形や色、音といったそこから生まれる表現をコントロールすること。
それは素材を直接操作（ハック）することに他ならない。

\section{演算}

数を定量的に操作することを演算という。
演算には数値（算術）演算と論理演算がある。

\section{スケール}

\nonumberpars

\chapter{表現}

素材から表現へ
データ彫刻

\section{形式}

素材の知覚化
知覚へのマッピング

構造の仮設
素材の組織化


\section{視覚}

\section{聴覚}

\section{ムービーとサウンド}

互いにコンプリメンタリな関係


\section{周波数}

時間領域と周波数領域

\section{知覚}

知覚のハッキング

\chapter{流動する素材}

\section{モデリング}

状態（対象）と操作

\section{フィードバック}

フィードバックと自己言及（書き換え）セルオートマトン

\section{ボトムアップ}

自律分散（非中心）的思考

\section{トップダウン}
ローカルとグローバル
ミクロとマクロ

\section{ネットワーク}
素材のネットワークマトリックス・フィードバック・ネットワーク\chapter{素材への介入}

\section{サーフェス}

インターフェイスとしてのグリッド

\section{テクスチャ}
テクスチャーとフィードバック

\section{スキル}

マイクロ・インターフェイス

\section{生成}

ジェネラティブ・インターフェイス\chapter{デジタリズム宣言}
\begin{thebibliography}{99}\bibitem{kraus94}ロザリンド・E・クラウス『オリジナリティと反復』小西信之訳，リブロポート，1994．
\end{thebibliography}\end{document}


「まず数字列ありき」



命令合成(instruction synhesis)音響/楽器モデルや知覚のモデルを用いない数値データの直接操作/演算→DA変換(アナログ化)


情報の数値による表現
全ての情報（文字、画像、動画、音声）は数値の集まりである
digital = 01ではない
数値の集まりだから処理が容易
同じ方法で送れる
簡単に、全く同じコピーが作れる
数値の列だから、劣化しない
劣化はもとのデータをデジタル化するときに起きる

これは道具ではない（コンピュータは素材である）素材としての数字列はじめに数字列（データ）ありき数字列を如何に知覚化するか＝数と知覚のインターフェイス

デザイン3.0：デジタル・マテリアリズム						固着したパッケージが最終目的地ではない。					データを処理して表示する								「数字列という素材をアルゴリズムが操作し視覚化/聴覚化する」	数字列に構造を与え、それを光や音として表現する				素材の一元化と表現の多様化								コンピュータは人間の手の代わりをする						コンピュータは人間の目や耳の代わりをするわけではない（できない、とはいわないが）	要素（エレメント）										構造（ストラクチャー、リレーション）						構成（マッピング、レイアウト、ディメンジョン、ジオメトリ）		数字列のレイアウト										数字列の構造化（秩序を与える）								ライン													クラスター												ツリー													ツリー（明確な上下構造）									セミ・ラティス（横のつながり）								ウェブ（一般のノードとリンク）								マトリックス											マテリアリズム											非オブジェクト化											非抽象化												ラスタースキャン											非オブジェクト的アプローチ								ヴィジュアル												数字列と空間												ビットマップ												マトリックス												数字列と色												ARGB（RGBα）											4平面													動画														フレーム												オーディオ												数字列と時間												1次元ビットマップ											ライン													チャンネル(マルチトラック)									デジタル・ハーモニックス									デジタル・ディストーション								AV（オーディオビジュアル）									空間と時間												フレームとチャンネル									周波数領域（スペクトル）								動的（ダイナミック）									有機的（オーガニック）									インタラクティビティ									「デジタル・マテリアリズム―デジタル・マテリアリズム序論デジタル・マテリアリズム技法	データ彫刻		マイクログリッド		構造の仮設		知覚と形式		形式から造形へ	リアルタイムAV		映像と音響		時間と空間		視覚と聴覚		メディア抽象			パラメータ抽象			スペクトル抽象			マテリアル抽象		共感覚と共素材	インターフェイス		時間の操作		スキルとアルゴリズム		デジタリズム宣言\section{道具としてのコンピュータ}筆、鉛筆、絵の具、紙、キャンパス、などが、人間の思考や知性をささえるものとして、古くから多くの人々に用いられ続けてきた。 20世紀に飛躍的な進化を遂げた高速計算マシンとしてのコンピュータは、そんな思考を支えるオブジェクトの一つとして、これまで「道具」という身体のメタファー、あるいは「（電子）頭脳」という人間の知性を統合する脳のメタファーを借りてデザインされてきた。さらにその後、GUI（グラフィカル・ユーザー・インターフェイス）による「デスクトップ」やインターネットの普及により、コンピュータが、「サイバースペース」という「空間」や「メディア」のメタファーを用いて語られることも多くなった。そうした道具や空間といったメタファーは、コンピュータを理解し、自在に使いこなすためのモデルとして、ある時までは確かに有効に働いてきた。はさみや包丁といった既存の道具を超えた「人間の思考のための新しい道具」\cite{rheingold}というメッセージは、コンピュータというマシンの革新性や創造性を広く伝えるのに、恰好のキャッチフレイズにもなった。同時にそのメタファーは、あるときは「コンピュータといえども、しょせんはただの道具である」と、コンピュータを神格化する人々に対する抑止力として働き、またあるときは「これまでのテクノロジーの中で、最もフラストレーションの種となる」と、人間中心のデザインを主張する人たちの、恰好の例題として取り上げられてきた\cite{norman}。計算の理論的モデルとして広く用いられているチューリング・マシン\cite{dewdney}にまでさかのぼれば、コンピュータは確かに、すべての計算を行うことであらゆる道具になれる万能機械、すなわちメタ＝マシンであるといえる。そうした観点からは、確かにコンピュータは万能である。しかし万能であるがゆえ、それは結局メタファー（ものまね）から出発せざるを得ない。理論整然とした美しいインターフェイスを被せることによって、コンピュータは既存のさまざまな道具に似せられる。デスクトップのフォルダーやゴミ箱などはみな、すでに身近に存在している道具のメタファーである。コンピュータのディスプレイ上で、フォルダーはフォルダーらしく見せかけられ、ゴミ箱はゴミ箱らしく見せかけられる。しかし、GUIやデスクトップを使いこなす達人にとって、フォルダーアイコンはもはやフォルダーではないし、ゴミ箱アイコンも、ゴミ箱ではない。物質世界とのつながりなど存在しなくても、 GUIを華麗に使いこなすことは可能であるし、使いこなせば使いこなすほど、デスクトップという既存の道具のメタファーは消え去ってしまう。\section{素材としてのコンピュータ}その道の達人とは、自分の使う道具にも深く通じている、とよくいわれる。同時にどんな表現者にとっても、表現の素材に対峙しその本性や特徴を知ることが、すぐれた表現のためは欠かせない。もし、コンピュータが道具であるとすれば、コンピュータを使って表現を行う際に、制作者が立ち向かっている素材は一体何なのだろう？コンピュータが使い古されたのこぎりや、整然と並べられた調理器具のような道具だとすれば、そうした手になじんだ道具を使って加工したり調理している対象は一体何なのだろう？コンピュータを表現のための道具ではなく「素材」であると考えてみるのはどうだろう。表現のためのすぐれた道具としてではなく、表現のために自らが選択した素材であると考えてみるのだ。コンピュータをはさみや包丁といった道具ではなく、紙や木、金属や石といった素材と並べてみるのだ。コンピュータを道具ではなく素材であると考えることで、コンピュータの違った側面が見え始める。従来の「機能」や「使いやすさ」といった視点以外の特徴が見え始まる。新たな表現のアイデアにつながっていくかもしれない。まず必要なのは、コンピュータという素材と正面から向きあうことである。素材としてのコンピュータの特性や、取り扱い方を探り、そこにスキルを働かせる術を身につけなければならない。同時に、素材をコントロールするというよりも、むしろ素材に身をゆだね、素材に導かれるように制作を進めていかなければならない。素材にメタファーは必要ない。木や石を何かのメタファーで語ったりはしない。木は木、石は石だ。木は石になれないし、コンピュータは鉄にはなれない。コンピュータを素材とみなす、ということはつまり、メタファーなしにコンピュータに直接接する、ということである。コンピュータはコンピュータ、本やカンバスのシミュレータでも、デスクトップのシミュレータでもない。◯◯でもできることではなく、◯◯でしかできないことに着目する。コンピュータでもできることより、コンピュータでしかできないことが重要なのだ。メタファーが用いられるのは、それを人の既存の経験に近づようとするときだ。その背景には、人が自ら変化していくことよりも、対象を人にむりやり近づけるのを良しとする「人間中心」という考え方がある。それは一見、人にやさしく、技術を人に従わせる、反機械主義のモットーに聞こえる。しかしそのやり方は、逆に人間を、何らかの固着化した枠組に押し込め、上から見下ろすように、そこに何かを提供しようとしてしまいがちである。人間をある一つのシステム、あるいは機械とみなしてしまうのだ。コンピュータを素材と考えるメタファーなしの表現は、無批判に用いられがちな、そうした「人間中心」の考え方にも再考をうながす。人間には、自分たち自身が想像できないほどの、柔軟性やダイナミズムがある。工夫したりスキルを働かせる余地さえあれば、機械が人間に合わせるまでもなく、人間はその新しい、予想外で逸脱的な使い方を、身体的に獲得することができる。「人間中心」とは、そうした人間の可能性を過小評価せずに、その計り知れない可能性を信じることだ。人が何かしらの枠組を想定して「つくったもの」だけでなく、そのプロセスで図らずも「生まれたもの」の面白さや素晴らしさを認めることだ。人間のフレキシビリティーも、人間とコンピュータの関係も、そんなに単純なものではない。\section{数の特徴}コンピュータは数を記憶し、それを演算処理するマシンである。数を使って、演算することができる。コンピュータを素材とする、ということは、まず、数とその演算を素材とする、ということでもある。演算とは、数を足したり、引いたり、掛けたり、割ったりする操作（アルゴリズム、算法）のことである。では、数とは何か？紀元前2000年以上も昔から、人類は少なくとも4000年もの間ずっと、数にとりくみ、親しんできた\cite{lanczos}。現在では、数よりも、指という意味に由来する「デジタル」ということばの方に、なじみがあるかもしれない。数は物質的な存在ではない。数は「数える」という行為から生まれた自然数は実際に存在するが、負の数や無理数、虚数は想像の産物にすぎない、ということではない。確かに数は、物の一部分でもないし、その性質でもない。しかし数は定量的で測定可能な存在である。感情や観念のように、定性的で測定不可能なものではない。数の世界は、定量的な世界であると同時に、ある演算規則にしたがって操作が可能な、記号の世界でもある。それは、現実の物質世界とは切り離され、完結したもう一つのパラレルワールドとして存在している。抽象された概念としての数の世界のルールは現実世界のふるまいとは直接関連がないが、現実世界と互いに関連づけることが可能である。数を物質に添えることで、何かを「数え上げる」ことは、そのもっともシンプルで身近な一例だ。数の特徴を考える上で、もうひとつ欠かせないのが「抽象（アブストラクション）」である。抽象とは、多くの物や事柄や具体的な概念から、それらに共通な属性を抜き出し、これを一般的な概念としてとらえることである。この抽象という機能のおかげで、数は物質世界のさまざまな分類や制約――表現形式や次元を自由に乗り越えることができる。\section{数の量}今日のパーソナル・コンピュータは、いったいどのくらいの量の数を取り扱っているのだろうか？コンピュータのCPU（中央処理装置）が処理したり、メモリーやハードディスク記憶する、数で表現された情報（デジタル情報）の最小の単位は、1あるいは0のいずれかの値をとる「ビット（bit）」である。ビットは Binary Digit の略で、2進数の1桁分に相当する。ビットを8つ集めたものをバイト（byte）と呼ぶ。バイトは、2進数で表記すると、 $00000000^{(2)}$から$11111111^{(2)}$、16進数で表記すると $00^{(16)}$から$FF^{(16)}$、つまり10進数のでいう0から255までの256通りの情報を記述することができる。図\ref{fig:memorydump}は、今僕が使用しているコンピュータのメモリー（RAM:Random Access Memory）の内容を、ダンプ表示したものである。\begin{figure}[htbp]\caption{\label{fig:memorydump} メモリー・ダンプ}\end{figure}図\ref{fig:memorydump}では、メモリーの内容を16進数で表現しているため、数字2文字が1バイトに相当する。 各行ごとに148文字あり、それが全部で 55行並んでいるので、この図の中には、 148文字×55行÷2＝4070バイトの情報が存在していることになる。 2の10乗バイトである1024バイトのことを、1キロバイトと呼んでいるので、4070バイト＝約4キロバイト、ということになる。さらに、1024キロバイト＝1048576バイトのことを、 1メガバイトと呼ぶ\footnote{1024＝1000と近似して、キロ＝1000＝$10^3$、メガ＝1000000＝$10^6$ と用いられることが多い。}。かつて、メモリーは高価な貴重品であったが、最近のパーソナル・コンピュータは、標準でも32メガバイト程度のメモリーを搭載している。 32メガバイトと一口にいってしまうが、その量を紙を使って表現すると、先ほどの図\ref{fig:memorydump}で、1048676×32÷4070≒8244枚分に相当する。メモリ－だけでなく、ハードディスクの大容量化と低価格化もめざましい。数十ギガの容量をもつハードディスクも、いまや手軽な値段で手にいれることができる。 1ギガバイト＝1024メガバイトだから、例えば、10ギガバイトのハードディスクには、 1024×1024×1024×10＝10737418240バイト、先ほどのメモリー表示で 10737418240÷4070≒ 2638186枚、約264万枚分の情報を蓄えることができる。少し厚めに本1冊あたり300ページと考えれば、264万枚（＝ページ\footnote{日本語の場合、1文字＝2バイトで表現されているので、 4070バイトの情報は、 2000文字＝原稿用紙5枚分に相当する。これは、本1ページの文字量としてはやや多い。通常は、その半分～3/2程度。 }）は、約8800冊の本に相当する。1日に1冊づつ読んでも24年以上かかる程の量だ。\section{量と質}コンピュータの中につまっている数のまず第一の特徴は、先ほど例にあげた8000枚を越える紙や、8800冊にもおよぶ本に相当する記憶容量のような、大きな図書館にでもいかないとなかなか実感できない「量」にある。「量より質」ということばがよく聞かれる。しかし、アメリカの作曲家、ジョン・ケージは、ダニエル・シャルルとの対談集『小鳥たちのために』\cite{cage}の、未来の革命に対するシャルルの一連の問いの中でこう答える。\begin{quote}質的な変化はもちろん起こるでしょうが、たった一つの点かまたはいくつかの決まった点についてだけです。決定的なのは量的な変化ですよ。\end{quote}易経の方法（偶然性）にもとづくケージの作品では、使われている素材や方法のほとんどはシンプルなものだ。それは質のみを問題にする視点からは、場合によって、貧しさともとらえられがちである。しかし、そこにかかわる「量」があるしきい値を越えると、突然その全体がひとつの豊かさをあらわし始める\footnote{例えば『マルセルについて何も言いたくない』というマルセル・デュシャンに捧げられた作品では、まず、ある辞書の1428ページ分の情報を、易経にしたがって64のグループに分類し、さらにそれをくじをつかって、単語→文字→文字の断片に分解した。次にこの断片群が、261の印刷上の可能性を組み合わせて再構築された。レジャン・ヒラーとの共作で上映時間に4時間半を費やす『HPSCHD』は、58のアンプが生のハープシコードの音の増幅とコンピュータの微分音のために用いられ、12台のプロジェクタによって数千枚のスライドがいたるところに映し出された。}。\begin{quote}質的な視点では、これらの要素一つ一つをその単純さ、それ本来の姿で捉えることはできません。それに反して量は、単なる出現を決定する要因なんです\cite{cage}。\end{quote}コンピュータは圧倒的ともいえる「量」を私たちにもたらした。小さな図書館に匹敵するほどの量の情報が、僅か数キログラムの携帯可能なマシンに載っている。マイクロチップ自体がムーアの法則 \footnote{「1個のシリコンチップに載る回路の数は18～24カ月ごとに倍増する」という法則。例えば1965年当時，最も複雑なチップが搭載するトランジスタの数は64個だったが、 1999年10月に発売されたIntelのPentium IIIプロセッサでは280万個である。}にしたがって「量」を増やしてきただけでなく、パーソナル・コンピュータ自体の数も急速に増加しつつある。\begin{quote}革命は私達の目の前で、あらゆるレベルで展開されつつある――そしてただ私達がそれに気づいていないだけだ\cite{cage}。\end{quote}\section{速度}コンピュータの中につまっている数の第二の特徴は「速度」である。 1999年8月に発表された、PowerPC G4 プロセッサを搭載した Apple PowerMac G4 は、平均で 1ギガフロップス、最大で4ギガフロップスの演算速度を持っていた。フロップス（FLOPS = FLoating point Operations Per Second）は、 1秒間に何回浮動小数点演算、たとえば小数どうしの四則演算ができるかで、コンピュータの速度をあらわす指標である。1ギガフロップス＝$10^9$＝1000000000フロップスは、1秒間に10億回の浮動小数点演算が可能であることを示している。1秒間に10億回の計算、とひとことでいってしまうのは簡単だが、1回の演算に、1秒間に地球を7回り半、30万キロメートル進む光が 30センチメートル進むのと同じ時間しか必要としない。2000年に発売されたゲームマシンのプレイステーション2は、 6.2ギガフロップスもの演算速度を持っているが、この場合 1回の演算の間に、光はたった5センチメートルしか進まない。こうした人間の想像を越える程の「速度」は、コンピュータが持つもう一つの「量」だともいえる。\section{ビットから再び数へ}ドイツのメディア思想家、歴史家のフリードリヒ・キットラーの『キットラー対話――ルフトブリュッケ広場』\cite{kittler}に、「われわれの手にしているのはいつも0と1の情報にすぎず…」というくだりが登場する。 0と1のいずれかで表わされるビット（情報）は、ニコラス・ネグロポンテの『ビーイング・デジタル――ビットの時代』\cite{negroponte}のように、アトム（物質）との対比物として、しばし紋切り型に用いられる。ビットは、デジタルという概念の一種のイコンとして、有効にはたらくことも多い。しかしビット（という概念）は、それほどデジタル表現にとって重要なのだろうか？コンピュータを使って何かをデザインするとき、0/1からなるビット列そのものを意識したり、直接操作することはほとんどない。ビットよりも本質的なのは「数」である。もちろんビットは数の2進数表現ではあるが、実際には数の表現は、何進法であってもかまわない。重要なのは「数」の量的存在とその高速な演算操作体系である。数とデザインのつながりは決して新しいものではない。1:1.618の比であらわされる黄金分割や、建築家ル・コルビュジェのモデュロール\cite{corbusier}のように、数はむしろ、ビットというなにやら新しいデジタルのイメージに比べると、古典的で窮屈な印象を与えるかもしれない。とはいえ、画像にせよ、音にせよ、テキストにせよ、コンピュータの中でそれらはすべて数の塊――数字列で表現されている。かたちは方眼紙のような四角いビットマップの明滅や座標列で、色はRGBの3色、つまり3つの数字の組み合わせで表わされる。 CDクオリティのステレオ・サウンドは、1秒間あたり 16ビット（0～65535）の数88200個の数のフローである。テキストを構成する漢字やひらがな1文字は、2バイトの数に対応している。デジタル表現にとって、数は理解や思考のためのモデルにとどまらない。それは表現そのものを支えている。コンピュータの中の「数字列」を表現のための素材と捉える考え方を「デジタル・マテリアリズム」と呼ぼう。「デジタル・マテリアリズム」は、画像や音やテキストといった個々の表現形式を超えて、それらを貫く「数字列」という共通の表現の存在を意識し、その数字ひとつひとつを直接操作することで積み上げていくデザインの考え方である。すると色やかたちといった従来のデザインの基盤の多くは、派生的で可変なものになってしまう。ひとつの数字列から、画像も、音も、テキストも等しく生み出すことができるのだ。デジタルの世界では、あらゆる形式の表現は、数の前で等価になる。数の世界では、加減乗除や並べ変えといった、さまざまな演算操作を行うことができる。ある表現形式と関係づけられた数が演算によって、どのように表現自身や人間の知覚にフィードバックしていくのか――それも数という素材が持つ重要な特性のひとつである。いいかえれば、素材の数と表現の関連づけと、数の演算が知覚や体験に対する与える効果を知ることが、デジタル・マテリアリズムのはじめの一歩になる。次にまず、そのはじめの一歩を、じっくりと考えてることにしよう。\chapter{数と形式}\section{画像}\subsection{ビットマップ}数と画像イメージを結びつける、最もシンプルで基本的な方法が「ビットマップ」である。ビットマップの本来の意味は、ドットにアドレスをつけてデータ管理をする方法のことである。画像表現においては、0/1のビット列を順に方眼紙のようなグリッド（升目）に対応させ、ある升目に対応するビットが0ならばその升は白、1ならば黒として、升の白黒、すなわち点の有無で画像を表現する方式のことを指す。アナログな数学の世界における点（ポイント）は、大きさや面積を持たない抽象的な概念である。しかしデジタルな数値の世界のビットマップを構成するマス（升）としての点（ドット）は、大きさや面積をもった、通常は正方形の有限の実体である。ドットは大きさ（サイズ）と位置、という2つのパラメータを持つ。ビットマップでは、白黒画像の最小単位としての有限のドットの組み合わせで、さまざまなかたちが表現できる。8×8ドットのグリッドを考える。この画像は、一列毎に8ビット、つまり1バイトの数（$0$～$255^{(10)}$、16進数で $0$～$FF^{(16)}$） 8つ（＝列の数）、つまり16桁の16進数に対応する。例えば、図\ref{fig:memorydump}のメモリーデータ冒頭の64ビット「FFC10000FFC10000」からつくられるビットマップイメージは、図\ref{fig:FFC100FFC10000}の小蝦が2匹並んだようなかたちになる。\begin{figure}[htbp]\caption{\label{fig:FFC100FFC10000}FFC100FFC10000に対応するイメージ}\end{figure}\subsection{色}ビットマップイメージに色の情報を付加するためには、それぞれのピクセルが、光の3原色である RGB（赤、緑、青）の明るさに関する数値データを持てばよい。カラー画像を表現するために、色情報をもったドットのことを「ピクセル（画素）\footnote{ピクチャー（picture）とエレメント（element）からなる造語である。}」という。RGB表現は数と色を結び付ける、変換モデルのひとつである。RGB をすべて重ねると白色になることから、RGB のことを「加法混合」と呼んでいる\footnote{一方、絵の具の混合のように吸収を使った色の合成方法を「減法混合」と呼んでいる。減法混合の3原色は、RGBの補色であるCMY（シアン、マゼンタ、黄）である。 }。8ビット（0～255）のデータを3原色それぞれの明るさに 割り振ると、赤256階調×緑256階調×青256階調＝16777216色、つまり約1670万色を表現することができる。 ひとつのピクセルが表現できる色数のことを「色深度（Color Depth）」という。この場合 1ピクセルあたり 3色×8ビット＝24ビットのデータを持つことになるので、 24ビットカラー（モード）の色深度、という。同様に 1 つのピクセルに RGB それぞれ5ビット（0～32）ずつ、計 3色×5ビット＋不使用の 1ビット＝16ビットで表現する方法を 16ビットカラーと呼ぶ。この場合、32×32× 32＝32768色が表現できることになる。この色数は人間が判別可能であるといわれている色数に、ほぼ等しい\footnote{とはいえRGB 3原色の足し算だけで、人間が知覚できる色をすべて表現できるわけではない\cite{ikeda}。 }。数を節約して1ピクセルあたり8ビットしか割り当てないと、256色しか表現できない。この場合は、インデックスカラーという 32ビットカラーが表現できる約1670万色の中から256色を選んで表示する仕組みを用いる。この方法により、少ないビット数でも色の表現力は向上する。なお、最初にのべた白黒（モノクロ2値）のビットマップは、1ビットカラーとも呼ばれている。\subsection{アイコン}ビットマップを使ったデザインの代表例は、GUIのアイコンである。偶像や聖母像という意味に由来するアイコンは、ファイル（データやアプリケーション）、フォルダー、ディスクといったコンピュータ内のオブジェクトを差し示す小さな絵のことである。アイコンの図案は、アイコンが差し示す対象の内容や機能が直観的に把握できるものにすることが多い。アイコンのデザインで思い起こされるのは、1984年に発売されたアップル・マッキントッシュのGUIのデザイン手がけた、スーザン・ケアの仕事である。彼女はそこで、GUIの基本部品であるアイコン、ウィンドウの周囲の飾りやタイトルバーの横縞、スクロールバーのグレーの部分などのビットマップ、さらには、マックペイントという初期のマッキントッシュにバンドルされていたアプリケーションのインターフェイスや、そのマニュアルのイラストなどをデザインした\cite{levy}。マッキントッシュの洗練された「ルック・アンド・フィール（ユーザー・インターフェイスや全体のデザインから受ける印象）」の多くが、彼女のビットマップに対するセンスに負っている。\begin{figure}[htbp]\caption{\label{fig:macportfolio}マッキントッシュのGUIデザイン（http://www.kare.com/macportfolio.html）}\end{figure}スーザンの、まるで重箱の角をつつくような、ドット毎のオン/オフの繰り返しによるディテールのデザインは、デジタル制作のひとつの基本であり、象徴でもある。 わずか 32ドット×32ドットの白黒アイコン、といっても侮ってはいけない。そこには 2の1024乗＝約$1.80 \times 10^{308}$通りもの、広大な可能性が広がっている。 16ドット×16ドットのスモール・アイコンでさえ、$2^{256}$＝$1.16 \times10^{77}$通りの世界である\footnote{MacOSの場合、アイコンには、ラージ・アイコンとスモール・アイコンの2つがある。ラージ・アイコンは 32ドット×32ドット＝1024ピクセル、そしてスモール・アイコンは16ドット×16ドット＝256ピクセルのビットマップで表現される。 }。図\ref{fig:happymac}は、システム起動時にメモリのチェックを終え、チップに異常がなかったことを示すハッピーマック・アイコンである。目の部分が縦2ドットで表現されていることに着目してほしい。ふつう、人間の目は点（丸）あるいは、横棒で表現されることが多い。しかし、ハッピーマックのキュートさ、それもちょっと変わったテイストをもったキュートさは、この縦2ドットの目によるものだ。\begin{figure}[htbp]\caption{\label{fig:happymac}ハッピーマック・アイコン}\end{figure}マウスの位置を示す、縦横16ドットのスモール・アイコンのことを、マウス・ポインタという。図\ref{fig:mousepointer}は、マッキントッシュの標準マウス・ポインタのビットマップの拡大図である。縦横まっすぐと、45度のライン、そして2×2ドットの小正方形3つからなっていることがわかる。方眼紙状のビットイメージの特性にしたがったシンプルなデザインであり、視認性も極めて高い。これ以上1ドットたりとも動かすことができない、まさに完成された美をつくりだしている。\begin{figure}[htbp]\caption{\label{fig:mousepointer}マウス・ポインタ}\end{figure}アイコンのように、画像のサイズが小さければ小さいほど、ビットマップ全体の中での1ドット1ドットの役割が大きくなる。「ルック・アンド・フィール」や「視認性」といったシステム全体の使いやすさは、そうしたわずか1ドットのオン/オフの積み重ねから生まれる。デジタル・デザインの神も、ドット――細部（ディテール）に宿っている。\begin{figure}[htbp]\caption{\label{fig:appleicon}アップル本社前の巨大アイコン}\end{figure}\subsection{ビットマップ・フォント}マッキントッシュの開発における、スーザン・ケアのもうひとつの重要な仕事が、フォントのデザインであった。パーソナル・コンピュータの世界で、フォントのデザインに最初に着目したのもマッキントッシュであった。ビットマップで表現されたフォントのことを、ビットマップ・フォントと呼ぶ。初期のマッキントッシュには、スーザン・ケアのデザインによる「シカゴ」「ニューヨーク」「ジュネーブ」「カイロ」「ロスアンジェルス」「サンフランシスコ」といった、都市名がつけられたビットマップ・フォントが組み込まれていた。\begin{figure}[htbp]\caption{\label{fig:susanfont}スーザン・ケアがデザインしたフォントの数々}\end{figure}これらはいずれも個性的かつ実用的なフォントであるが、なかでもとりわけ評判が高いのが「シカゴ」フォントである（図\ref{fig:chicagofont})。肉太でありながらも柔らかく視認性の高い「シカゴ」フォントと、シンプルなゴシック調（サン・セリフ）の「ジュネーブ」フォントのコントラストが、System7時代までのファインダーの端正な美しさを醸し出していたことは記憶に新しい。「シカゴ」は、フォント・ファミリーとしてはサン・セリフでありながら、ストレス（太さの変化）をつけることで、めりはりと優雅さを兼ね備えている。もちろん、この「シカゴ」フォントは汎用的なフォントとはいえない。タイトルや見出しならともかく、通常のテキストの表示用としては、決して読み易いものではない。しかしそんな「シカゴ」が、デスクトップ上では急に存在感を発揮するから面白い。ここにも、ドットの神が宿っている。\begin{figure}[htbp]\caption{\label{fig:chicagofont}Chicagoフォント}\end{figure}\subsection{3次元ビットマップ}ビットマップ表現は、容易に3次元空間へも拡張できる。そのときの基本要素は、平面上のドットから、有限の縦、横、高さ、体積を持つ立方体となる。この3次元のビットマップを構成する立体ピクセルのことをボクセル（voxel）と呼ぶ。ピクセルと同じようにこのボクセルにも、色やテクスチャーなどの状態や性質を付与することができる。ボクセル表現を使って、さまざまな立体図形をデザインできるツールのひとつに、中ザワヒデキのデザインによる「デジタルネンド」というソフトウェア（アスク講談社）がある\footnote{デジタルネンドのウェブページが、http://www.sscn.or.jp/aloalo/shrine/NAKAZAWA/nendo/index.html にある。}。このソフトでは、32×32×32＝32768個のボクセルというネンドキューブ空間に、自由に色をつけることができる。$32^3$個のボクセルからなるグリッドは、いわば 3次元のアイコン空間（2次元のアイコンは32×32ピクセル）である（図\ref{fig:digitalnendo}）。\begin{figure}[htbp]\caption{\label{fig:digitalnendo}デジタルネンド}\end{figure}単位ブロックの組み合わせで立体造形するレゴ（LEGO）ブロックも、 この3次元ビットマップによる造形素材であるといえる。\begin{figure}[htbp]\caption{\label{fig:legomonster}レゴモンスター（中原浩大）}\end{figure}\subsection{ラスタ方式とベクタ方式}ピットマップのように、有限の面（ドット）あるいは立体（ボクセル）の集合で表現することをラスタ方式、ラスタ方式で表現した画像をラスタイメージ、と呼ぶ。それに対して画像や立体を直線や曲線、あるいは円や楕円、多角形といった、基本要素（オブジェクト）の集まりとして表現するのが、ベクタ方式である。それぞれのオブジェクトは、頂点や中心、半径などの座標値で表現される\footnote{一般に、ビットマップのようにラスタ方式の表現を扱うソフトウェアのことをペイント系ツール、ベクタ方式を扱うソフトウェアをドロー系ツールと呼んでいる。今日のペイント系ツールの代表例として Photoshop、ドロー系ツールの代表例として、 Illustrator（いずれも Adobe Systems社） があげられる。 }。\begin{figure}[htbp]\caption{\label{fig:vectorgraphics}ベクトル方式による表現}\end{figure}ベクタ方式には、グローバルな座標系の定義が必要不可欠である。座標系なしには、点ひとつ、線ひとつすら記述できない。座標系を使って記述される点や線、面はいずれも、ビットマップのドットとは異なり、大きさのない概念的な存在である。点の大きさや線の太さは、オブジェクトの位置やかたちとは別のパラメータで定義しておかなければならない。だからこそベクタ方式では、パラメータを変更するだけで図形を連続的に移動したり変形させることができる。ベクタ方式を用いた代表的な表現方法のひとつに「ポストスクリプト（Postscript）」がある。手紙の追伸、あるいは書物の後書きを意味することばにちなんで名付けられたこのポストスクリプトは、ページ記述言語というプリンタを制御するためのコンピュータ言語である。ページ記述言語の第一の目的は、プリンタの性能（解像度）に依存せず、常に一定の印刷（プリンタ出力）を保証することである\cite{postscript}。このことは、ベクタ方式という表現がもつ特徴と深く関連している。\begin{figure}[htbp]\caption{\label{fig:postscript}ポストスクリプト言語}\end{figure}平面、あるいは空間をグリッドに分割することによるラスタ（ビットマップ）方式は、ドットというディテールを積み上げることによるボトムアップ型の表現形式である。背景となる平面や空間は、均質なドットに分割され、その組み合わせで、さまざまなかたちを表現しようとする。ドットの側からみれば、自分のまわりにどんなドットがあるか（どのドットとつながっているか）という局所的な情報だけで、かたち全体が記述できることになる。それは原子論（アトミズム）の考え方、つまり物質が多数の粒子の集合であると考え、それによって物質の性質や現象を説明しようとする立場に通じている\footnote{中ザワヒデキはデジタルネンドに関連した『視覚芸術史における「デジタルネンド」誕生の意味』と題したテキスト（http://www.sscn.or.jp/aloalo/shrine/NAKAZAWA/nendo/imi.html）で、ラスタ方式とベクタ方式という世界記述の2方式を、「方眼」対「方程式」（世界所有の方法）、「物質」対「物体」（または「原子論」対「イデア論」）、「植物」対「動物」（座標系とトポロジー）という図式を用いて考察している。さらにその図式は、美術史におけるルネッサンス時代の2大対立関係である「ヴェネツィア派」（ジョルジョーネやティツィアーノ）対「フィレンツェ派」（ダ・ビンチやミケランジェロ）へと敷衍される。 }）。ベクタ方式の背景には、複雑なかたちを、直線や円、多角形といったいくつかの基本図形（プリミティヴ）の組み合わせで表現しようとする「抽象」の考え方が強く反映されている。最初に述べたように、抽象は数という概念そのものとも深く結び付いている。プリンタという物質世界の機器の特性によらず、常に一定の出力を得る、というポストスクリプト言語本来の目的にも、ベクタ方式が持つ抽象化機能が活用されている。\section{音}\subsection{デジタル・オーディオ}次に、数と音（サウンド）の関係を考える。音は物質の振動、多くの場合空気の圧力変動である。空気が振動すると気圧の低い部分と高い部分ができ、ちょうど海の波が伝搬するように、粗密波として伝わっていく。人間の耳に聞える音のことをオーディオ（可聴音）という。個人差はあるが、その周波数はおおよそ20ヘルツから20000ヘルツの範囲である\cite{ohkura}\footnote{ネコの可聴音はおおよそ100ヘルツから40000ヘルツ、コウモリの場合は数千ヘルツ～十万ヘルツといわれている}。画像の場合、まず第一に表現しなければならないのは、空間的なひろがりである。ビットマップは、数と空間をむすびつける。音にとって、まず第一に表現しなければならないのは、時間的な変動である。ビットマップ画像の場合、空間をピクセル、あるいはボクセルに分割した。音の場合も同様に、時間を均等に分割することで、数と時間を結び付ける\footnote{なお、画像における時間はフレームで、音における空間はチャンネルで表現される。}。均等分割する間隔を「サンプリング（標本化）時間」、その逆数を「サンプリング周波数」という。デジタルなビットマップを構成するドットが、大きさや面積をもった有限の実体であるのと同様に、デジタルな時間もサンプリング時間を最小単位とする「有限な」時間の組み合わせで表現される。そこにゼロ時間としての瞬間は存在しない。ある数字列をサンプリング時間ごとに空気の圧力に変換すると音が生まれる。音は空気の密度の高いところと低いところのくりかえし（粗密波）である。圧力を表わす、ひとつひとつの数値に何ビット使用するかで、音の解像度が決まる。8ビットの数を用いると、最大音量から最小音量までが256段階に分解され、16ビットの場合は65536段階、24ビットの場合は 16777216段階に分解される。このように、連続的な量を離散的な値で近似することを「量子化」といい、その際に用いる数のビット数を量子化ビット数という。横軸に時間、縦軸に圧力をとって音の波形を視覚的に表現することができる。時間をサンプリング周波数で、圧力を量子化ビット数で分割するということは、この波形を、横がサンプリング時間、縦が量子化ビット数で規定されるグリッドを通して覗くことに等しい。また、時間軸を基準に考えれば、デジタル・オーディオは、サンプリング時間がピクセルの大きさ、量子化ビット数が色深度に相当する、時間領域に展開された、1次元ビットマップとみなすことができる（図\ref{fig:samplegrid}）。\begin{figure}[htbp]\caption{\label{fig:samplegrid}サンプリングとグリッド}\end{figure}現在のCD（コンパクト・ディスク）には、サンプリング周波数44.1キロヘルツ、16ビットのデジタル表現が規格として採用されている。サンプリング周波数は表現できる音の周波数の上限を規定する。あるサンプリング周波数で表現できるもっとも高周波の音は、サンプリング周波数ごとに圧力の正負がフリップする音である。この音の周波数はサンプリング周波数の1/2になる。いいかえれば、音の周波数の最高値の2倍以上の周波数でサンプリングすれば、もとの波形が再現できる。CDフォーマットの場合、表現できる周波数の上限\footnote{この周波数を、サンプリング定理を発見したナイキスト（Nyquist）にちなんで、ナイキスト周波数と呼ぶ。}は 44.1/2＝22.05キロヘルツである。この値は人間の可聴周波数の上限より、やや高めの値になるように設定されている。CDクオリティーの音1分間に相当する数の量は、44.1キロヘルツ（サンプリング周波数）×2（ステレオ）×16ビット（量子化ビット数）×60秒＝84672キロビット＝10.584メガバイト である。単位時間あたりでいえば、176.4キロバイト/秒 になる。\subsection{デジタル・ハーモニクス}サンプリング周波数の高さによって、表現できる音の周波数の上限が規定されることから、通常のハイファイ志向の考え方では、サンプリング周波数をなるべく高くするのが良いとされがちである。CDのサンプリング周波数は44.1キロヘルツだが、最新のDVDオーディオの場合は、192キロヘルツにもなっている。人間の可聴領域をはるかに越えた高さの音が表現できる。逆にサンプリング周波数をどんどん落としていくとどうなるか？ それも 44.1キロヘルツのサンプリング周波数を半分の 2.05キロヘルツに落とす、といった程度ではなく、その100分の1の数百ヘルツから、1000分の1の数十ヘルツといった、超低サンプリング周波数に落とすと、音はどのように聴こえるのか？サンプリング周波数を極端に低くしていくと、原音の高音域がカットされると同時に、原音には含まれない（高）音が聴こえだしてくる。一般にこの現象は「エリアジング（Aliasing、折り返し雑音）」呼ばれている\cite{ohkura}。デジタル信号をアナログ信号に変換する際には、デジタル信号がまず、サンプリング周波数間隔でのパルス列に変換され、それを補間することでアナログ信号が得られる。このプロセスで「エリアジング（Aliasing、折り返し雑音）」と呼ばれる現象が生じる。これは、パルス列の冗長性により、サンプリング周波数の整数倍を中心として、仮想の高周波音（上側波帯と下側波帯）が生じてしまうことによる。\begin{figure}[htbp]\caption{\label{fig:aliasing}エリアジング}\end{figure}通常はこのエリアジングの音が、人間の可聴領域に浸入して来ないように、サンプリング周波数を十分高く設定したり、あらかじめ原信号の高音域をカットしたりする。エリアジングが折り返し「雑音」と呼ばれる所以である。人間の可聴領域に対してかなり低いサンプリング周波数で、サンプリング周波数の1/2以上の高音域を含む音をリ・サンプリングすると、エリアジングによる音が可聴領域に浸入し、原信号の音と対等、あるいはそれ以上に聴こえてくる。多くの倍音成分を含むハイ・クオリティーのピアノ音を、数百ヘルツ程度の超低サンプリング周波数でデジタル化すると、ピッチが移動したり、ガムランやプリペアド・ピアノの様に、非整数次の倍音\footnote{\ref{sec:freq}（p.\pageref{sec:freq}）を参照のこと。}を数多く含んだ、豊かで美しい音色に変化する。原信号には含まれていない非整数次倍音の発生は、理論的に説明可能ではあるが、サンプリング周波数の変化に敏感で予測困難な、デジタル表現特有の現象である。ギターなどの弦楽器演奏の際に、演奏者の熟練したテクニックで、弦の高次振動を強く発生させることを「ハーモニック奏法」という。このアナログ的な倍音操作方法に対応して、エリアジングによる倍音発生奏法を、僕は「デジタル・ハーモニックス」と呼んでいる。\begin{figure}[htbp]\caption{\label{fig:lowfrequency}サンプリング周波数と波形}\end{figure}\subsection{デジタル・ディストーション}CDの量子化ビット数は16ビットである。この場合音の振幅は65535段階に区切られる。量子化ビット数が20であれば、音の振幅は1048575段階に区切られる。圧力や色、明るさのように、連続的に変動する物理量を、有限の段階に分けることで生まれる誤差のことを「量子化誤差」あるいは「量子化雑音」という。デジタル・サウンドの場合、この量子化誤差は音のひずみとして、デジタル画像の場合は明るさの変化するところで偽の輪郭が発生する偽輪郭効果として現われる（図\ref{fig:qeror}参照）。\begin{figure}[htbp]\caption{\label{fig:qerror}量子化誤差}\end{figure}量子化ビット数は、音のダイナミックレンジ、つまり最大音圧と雑音の比（S/N比）の上限を規定する。量子化ビット数が16ビットの場合、その値は$20 log_{10}(65535/1) = 96dB$、20ビットの場合は、$20 log_{10}(1048575/1) = 120dB$\footnote{dB（デシベル）は最小可聴限界に対する音圧を表わす単位。10を底とする対数の20倍と定められている。音圧が2倍になると音量は6dB増える。}である。一般に、アナログレコードや業務用テープレコーダのS/N比が66dB、オーケストラのS/N比が120dB、人間の耳のS/N比が140dBといわれているので、CDのダイナミックレンジは、アナログレコードと生オーケストラの間に位置している。サンプリング周波数と同様に、最近のハイファイ志向の結果、人間の耳に相当するS/N比144dBの24ビット・オーディオも身近になった。サンプリング周波数と同じように、量子化ビット数をどんどん落としていくとどうなるか？12ビットの場合、S/N比はアナログレコードより少し良い72dB、8ビットの場合は、アナログレコードよりはるかに劣る 48dB、4ビットの場合は 24dB に低下する\footnote{一般に、最大ダイナミックレンジは、量子化ビット数の6.11倍（dB）である。}。量子化ビット数が小さくなることで、ダイナミックレンジは狭くなり、音はひずんでザラつき始める。同時に、ノイズ（量子化雑音）がしだいに大きくなってくる。これは、量子化による階段状の誤差が、ビット数が小さくなるにしたがって、拡大されていくためである。量子化雑音は、ヒスノイズやハムノイズのような時間的に一定のバックグラウンド・ノイズとは異なり（量子化ビット数がどんなに小さくても、デジタルシステムは入力信号がまったく与えられていない場合には、雑音を発生しない）、信号が入力した時にのみ発生する。量子化ビット数を落としていくことで生まれる独得の質感をもった歪を、過大な入力によって生じるアナログ回路のディストーションに対応させて、「デジタル・ディストーション」と呼ぶこともできるだろう。白黒2値（1ビットカラー）のモノクロ・ビットマップに相当する量子化ビット数が1のデジタル・サウンドは、歪んでノイズだらけである。しかし、この、わずか1ビットのサウンドからも、人間の耳は、原信号の音色のニュアンスを、確かに聴き取ることができるから、聴覚のメカニズムは面白い。\begin{figure}[htbp]\caption{\label{fig:lowbitrate}量子化ビット数と波形}\end{figure}\subsection*{信号伝達速度}直観的には、サンプリング周波数が表現できる周波数レンジを、量子化ビット数がダイナミックレンジ（最も小さい音と大きな音の比）を決めると捉えることができる。しかし情報理論的には、むしろ両者の積としての信号伝送容量（速度）が重要な意味をもっている。たとえ量子化ビット数が1ビットでも、サンプリング周波数を極端に高くすれば、広い周波数レンジと大きなダイナミックレンジを確保することが可能である\footnote{サンプルの値が物理量そのものに対応するのではなく、連続したサンプルの差分を表現する。}。例えば、通常の量子化ビット数16ビット、サンプリング周波数44.1キロヘルツと、量子化ビット数1ビット、サンプリング周波数705.6（＝44.1×16）キロヘルツのデジタル情報は、等しい伝送速度をもつ（単位時間あたりの伝送量が等しい）。例えば、サンプリング周波数がCDの64倍の 44.1×64＝2822.4キロヘルツのの1ビット量子化方式の場合、トータルではCDの4倍の信号伝送速度を持つ。 1ビット伝送方式の場合、複数の量子化ビット数ごとの同期をとる必要がなくなり、伝送時のエラーに強い、といった特徴もある。信号伝達の速度は、ネットワークを使ってオーディオやムービーなどの時間軸上の表現を行う際の、基本パラメータの一つでもある。前述のように、CDクオリティーのデジタル・サウンドの信号伝送速度は、毎秒 176.4キロバイト＝0.1764メガバイトである。これに対して、イーサーネットの理論的な伝送速度は、100BaseTで毎秒100メガビット＝12.5メガバイト、 10BaseTで毎秒10メガビット＝1.25メガバイトであるので、CDサウンドの伝達には充分な速度を持っている\footnote{720×480ピクセルのDVフォーマットの場合、信号伝達速度は毎秒3.5メガバイト（毎分210メガバイト＝毎時12.6ギガバイト）なので、10BaseTでは伝送不可能である。}。電話回線を使ったアナログモデムの場合、最大速度でも毎秒56キロビット＝7キロバイト程度なので、 CDクオリティーの音の直接伝送は不可能である。\section{テキスト}\subsection{文字コード}数とテキスト（文字列）は数と文字の対応表である「文字コード（符号）」によって結びつけられている。いいかえれば、文字コードとは、個々の文字や記号に割り振った数のことである。文字コードを介して数字列から文字列を生み出すことも、文字列を数字列に変換することもできる。ひとつひとつの文字や記号に、何バイトの数を対応させるかによって、いくつの文字を数で表現できるかが決まってくる。例えば7ビットの数、つまり2進数7桁の数に文字を対応させると、$0000000^{(2)}$（0）から$1111111^{(2)}$（127）までの、128個の文字を扱うことができる。16ビットの数を用いれば、65536個の文字を扱うことができる。あまり多くの文字数を必要としない英数字の文字コードには、7ビットの数が用いられている。現在、世界中で用いられている、コンピュータ用の英数字の文字コードの基本として、もっとも普及しているのが、1963年にANSI（米国規格協会）により定められた、 ASCII（American Standard Code for Information Interchange）コードである。 ASCIIコードは、表現可能な128文字のうち 94文字がアルファベットや数字、記号などの印字可能な文字セット、残りの34文字の部分が、キャリッジリターン（行の先頭にカーソルを戻す）やラインフィード（改行）、デリート（削除）などの制御コードになっている（図\ref{fig:asciicode}）\cite{yasuoka}。\begin{figure}[htbp]\caption{\label{fig:asciicode}ASCIIコード}\end{figure}例えば「digital」という文字列は、 ASCIIコードを介して16進数で「64 69 67 6974 61 6C」という数字列と結び付けられている。この 16進数2桁ずつの数字列のことを「バイト列」と呼ぶ。\begin{figure}[htbp]\caption{\label{fig:charandbyte}文字列とバイト列}\end{figure}日本語や中国語、韓国語のように漢字をつかう言語の場合、漢字の数が多いため、 7ビットの数で、それらを扱うのはとうてい無理である。そのため漢字の文字コード、つまり漢字コードには、16ビット（2バイト）の数が用いられる。漢字コードであらわされる文字のことを、2バイト文字、という。日本語の漢字コードには、JIS（日本工業規格）コード、シフトJISコード、 EUCコードなどがある。もっとも古く基本となっているのが、1978年に制定された JIS（漢字）コードである。使われる頻度が高いと思われる漢字2965字が、JIS第一水準漢字として、頻度が低いと思われる漢字3384字（現在は3390字に拡張）がJIS第二水準漢字として定められた。JISコードは、1983年に第一回の改正が行われ、それまでのコードを旧JISコード、その時改正改訂されたものを新JISコードと呼んでいる。以後、90年、97年に2度の改正が行われている。なお、JISコードには、16進数4桁の「16進コード」と、10進数4桁の「区点コード」の2つの体系がある。\begin{figure}[htbp]\caption{\label{fig:kanjicode}漢字コード}\end{figure}\subsection{メタ＝ビットマップ}ディスプレイ上の文字表現は、格子状のビットマップに似ているところがある。ビットマップにおけるドットやピクセルを、文字コードを介して数字と結び付けられた文字に置き代えてみる。すると、方眼紙上のビットマップと原稿用紙のような升目の上に書かれたテキストの構造が重なってくる\footnote{文字幅一定のモノスペース（等幅）・フォントを用いた場合。文字幅可変のプロポーショナル・フォントの場合には、文字組みという観点から別の議論が必要である。}。ビットマップと異なるのは、ビットマップのドットに相当する部分に、文字コードだけでなく、それぞれの文字のかたちが埋め込まれていることである。つまり、文字コードを介して数字列で表現された文字列の中に、さらにフォントという数字列が埋め込まれていることになる。文字コード列としてのデジタル・テキストは、ビットマップのドットに相当する一文字一文字の中に、フォントというビットマップが埋め込まれた、メタ＝ビットマップ的な構造を持っている（図\ref{fig:metabitomap}）。\begin{figure}[htbp]\caption{\label{fig:metabitmap}メタ＝ビットマップ}\end{figure}\subsection*{アスキー・アート}電子メイルなどのデジタル・テキストによるコミュニケーションには、話し言葉がもつ身ぶり手ぶりや声の抑揚、手書き文字がもつ字形のゆれや乱れが込められないため、フェイスマーク（スマイリー）という文字の組み合わせによる絵記号を、コミュニケーションの補助に用いることが多い\footnote{Smiley http://clubs.scholastic.ca/smiley.html}。\begin{figure}[htbp]\caption{\label{fig:facemark}フェイスマーク}\end{figure}フェイスマークと同じように文字の組み合わせで、さらに大きなイメージを表現したものを、アスキーアートという。アスキー・アートには、フェイスマークのように数文字しか使わない小さなものから、千文字を越える大規模なものまで、さまざまなものがある\footnote{Joan Stark's Original ASCII ART Gallery \tt http://www.geocities.com/SoHo/7373/ \rm}\footnote{Christopher Johnson's ASCII Art Collection \tt http://chris.com/ascii/ \rm}\footnote{Erik Veland's Wicked ASCII Art \tt http://www.wigwam.org/Ascii/ \rm}\footnote{Ascii Pictures by Allen Mullen \tt http://users.inetw.net/{\char'176}mullen/ascii.htm \rm}。テキストを用いたグラフィックス表現は、電子メイル上などで、文字や記号を使って地図やバナー（垂れ幕、横断幕）を描くときにも使われる。\begin{figure}[htbp]\caption{\label{fig:asciiart}アスキーアート}\end{figure}\begin{figure}[htbp]\caption{\label{fig:asciiarttool}アスキーアート制作支援ツール}\end{figure}Email Effects 1.6.5 \tt http://www.sigsoftware.com/emaileffects/ \rmFIGTree 1.0b2 \tt http://st-www.cs.uiuc.edu/{\char'176}chai/figlet.html \rmMapWrite \tt http://www.kyoto.zaq.ne.jp/home/ken/softwares/index.html \rmフォントは、いわばそれ自体がひとつの、あらかじめ定義された画像イメージである。数十文字しかない英数字に比較して、6000字を越える2バイト漢字コードのイメージの量は膨大だ。文字のひとつひとつがアイコンに相当しているようなものである。1970年代の終りから80年代にかけての、日本語ワードプロセッサーの開発の苦労や、パーソナル・コンピュータ黎明期には、英文に比較して大量のデータを必要とする漢字をディスプレイに表示させたりプリンターで印刷すること自体が、大きなチャレンジであった\cite{tomita}。音読み、訓読み、送りがなといった、漢字の言語的な多様性のみならず、図像（アイコン）的なグラフィカル・イメージとしての漢字フォントの可能性も、多くのアーティストやデザイナーによって開拓されてきた。\subsection*{コンクリート・ポエトリー}文字とイメージ、ということで思い起こされるのは「コンクリート・ポエトリー」である。それは、語句を星座状に配置することでアルファベットを空間に放出させた、詩人ステファヌ・マラルメ最晩年の『骰子一擲（さいいってき）』（1897）にその源を遡ることができる。ギヨーム・アポリネールの『雨』（1916）という印象的な作品や、ことばのかたちと意味内容を切り離した未来派やダダの活動を経て、現代的なコンクリート・ポエトリーは、スイスの詩人、オイゲン・ゴムリンガーの1950年代の作品（『アヴェニダス』や『シレンチオ』）や、アロルド・デ・カンポス、デシオ・ビニャタリといたブラジルの作家グループ「ノイガンドレス派」の活動に始まるとされる\cite{hardison}。活字組みやタイプライターというテクノロジ－に触発されて、単語から文字へと視点が移っていくことで生み出されたコンクリート・ポエトリーは「視覚的イメージとしての言語」と「言語的イメージとしての視覚表現」の狭間にある可能性を探索する。それは、言語表現における配置やかたち、色といった視覚的な要素の役割を見直すことで、新たな表現やコミュニケーションの方法を模索し、さらに言葉と絵という2つの表現形式を共通の視覚体験によってつなごうとするものであった。文字から意味を切り離し、そのかたちや空間配置に着目することは、言語の物質化、オブジェ化の方向につながっていく\cite{mukai}。新しいテクノロジに導かれたオブジェクトとしての文字表現と、素材としてのデジタル・テキストの特性を生かしたアスキーアート、そして数を物質化、オブジェ化するデジタル・マテリアリズムの距離もまた、きわめて近い。\begin{figure}[htbp]\caption{\label{fig:concretepoetry}コンクリート・ポエトリー}\end{figure}\section{素材と形式}\subsection{形式からの独立}画像、音、テキストといった3つの表現形式を数字列にまで還元することで、それぞれの表現形式を結び付けることができる。例えば、数値表現された画像情報としてのビットマップ形式の画像ファイルを、音が表現されたオーディオ・ファイルとして解釈することで、いかなる画像ファイルから音を生成することも可能である。同様に画像ファイルからテキストを生成することも可能であるし、逆に、いかなるサウンドファイルやテキストファイルから、画像を生成することも可能である。\begin{figure}[htbp]\caption{\label{fig:sound2image}サウンドファイルから生成された画像}\end{figure}\begin{figure}[htbp]\caption{\label{fig:text2image}テキストファイルから生成された画像}\end{figure}デジタル・マテリアリズムの中心にあるのは、数字列としてのデジタル・データである。色やかたち、音や動きなどの物理的な表現の影の存在、あるいは近似値としての数字列ではなく、素材としての数字列そのものから出発する。表現から数への変換（デジタル化）や数による表現の生成（アナログ化）を、数の世界と表現の世界を結び付けるインターフェイスだと捉えれば、インターフェイスをさまざまに組み合わせ、交錯させることで、固定化した表現形式は消失し、形式間の壁を乗り越えることができる。数字列という素材に、あるフォーマットをあてはめてアナログ化することで、それは画像や音、テキストなどの、さまざまな形相（eidos）をとり得る。数字列という素材は、表現形式とは独立である。だからこそ、形式に素材をあてはめるよりは、数字列という素材の特性を素直に生かして、素材と形式の関係をダイナミックにデザインすることが可能になる。\subsection{素材の抽象性}「量」と「速度」に続く、数字列の素材としての第三の特徴は、その「抽象」性にある。いいかえれば、数とは、それ自身が「素材」でもあり、かつまた「モデル」でもある、ということだ。ここでいうモデルとは、クレイモデルや石膏モデルのような、物理的なかたちや色をもったモデル＝模型のことではない。それは、さまざまな要素や関係が絡みあった物理的世界の物事や具体的な概念から、それらに共通な特徴（属性）をとりだして表現したものである。いいかえれば、モデルとは、人間の抽象的な概念のうち明晰なもの、あるいは構造を持った抽象概念である。何かを表現する際には、表現そのものだけでなく、その背後にあるモデルが、表現同様に（あるいはそれ以上に）重要になってくる。これまで述べてきたように、数は「非物質的」で「測定可能」で「定量的」な存在としての素材であるだけでなく、それ自身がさまざまな表現形式を抽象することができる、明晰かつ構造的な「モデル」でもなる。紙や木、金属や石といった物質的素材と数という非物質的素材との大きな違いがここにある。\chapter{時空間領域と周波数領域}\section{振動による抽象}光や音は、揺れ動く「振動」である。物理的にいえば、振動とは空気の圧力や電磁波などの現象が、ある一定値を中心に周期的に値を変えることである。一定時間ごとに同じ現象が繰り返される場合の一定時間を「周期」という。その逆数、つまり光や音、電流や電波などが一秒間に向きを変える回数を「振動数」あるいは「周波数」という。その単位はドイツの物理学者の名前にちなんでつけられたヘルツ（Hz）である。数とはまた別の意味で、振動は光や音のみならず、さまざまな表現を、特に「知覚」という観点から抽象することができる。振動の周期は、時間のレンジと結び付いている。音楽の場合、数十ヘルツから数万ヘルツ、すなわち 0.0001秒から0.1秒といった、短い時間レンジのピッチに始まり、数ヘルツ程度のリズムや、その長期的な変動であるテンポ、さらに長い時間レンジの小節や形式、楽曲といったさまざまな周期の振動が知覚できる。いいかえれば、ピッチやリズム、テンポや形式といったさまざまな音楽的諸概念を、広い時間レンジにわたる振動とみなすことができる。ドイツの作曲家、カールハインツ・シュトックハウゼンは、そうした振動による抽象のことを「統一された時間領域」と呼んでいる\cite{stockhausen}。いわば、振動による音楽の統一理論である。\begin{quote}知覚のレンジは時間のレンジであり、時間は我々により、言い換えれば我々の肉体構造や我々の知覚器官により、分割されているのです。あるレンジから別のレンジへ、リズムからピッチへ、楽音やノイズから形式的構造へと、時間の知覚を連続的に変化させるという現代的な手法が採用されるようになって以来、作曲家は、統一された時間領域の中で仕事ができるようになりました。そしてこのことは、音楽をいかに作曲（コンポジション）するのか、またどのように考えるのかという伝統的な概念を全く変えてしまいました。\end{quote}\section{時間と空間}振動は時間的な概念のみならず、空間的な概念とも結びついている。音波は時間的現象であると同時に、ある速度（音速\footnote{温度 $t[℃]$ の空気中の音速 $v[m/s]$ は $v = 331.29 + 0.61t$ である。}）で拡がる、方向性をもった空間的現象である。時間的な変化を空間的なグラフで表現することができるのと同様に、（距離）＝（速度）×（時間）の関係式を用いることで、時間と空間を相互に変換し、結び付けることが可能になる。音の場合、音速を340m/sとみなせば、20ヘルツ、200ヘルツ、2000ヘルツ、20000ヘルツの音の波長はそれぞれ、17m、1.7m、17cm、1.7cmになる。これはおおよそ、私たちの身体の長さのスケールである。音を1次元の画像とみなすことができるように、画像を音と同じように空間的に拡がった振動ととらえることができる。人間の目に見える光のことを可視光といい、その波長は約400ナノメートル（$4 \times 10^{-7}$ m）から700ナノメートル（$7\times 10^{-7}$ m）の範囲である\cite{ikeda}。光の速度は秒速30万キロメートル（$3 \times 10^{8}$ m/s）なので、可視光の時間レンジは約 $2 \times10^{-15}$ s、すなわち $5 \times 10^{14}$ ヘルツと音に比べて非常に短い。\section{周波数領域}\label{sec:freq}時間や空間に関して、変動量をサインやコサインといった三角関数で表現できる振動のことを「正弦波」と呼ぶ。例えば、一定の速度で回転する軸につながれたクランクの高さは、時間と共に正弦波的に変化する。正弦波には、3つのパラメータがある。第1のパラメータは「振幅」で、正弦波の波の高さ（クランクの腕の長さ）に相当する。第2のパラメータは「位相」で、波（クランク）の動き始めの時間に相当する。第3のパラメータは、前述の「周期」あるいはその逆数の「周波数/振動数」で、クランク軸の回転速度に相当する。この3つのパラメータによって、あらゆる正弦波の中から、あるひとつの正弦波だけを特定することができる。ある振動のくりかえしの単位となる、もっとも低い周波数（もっとも長い周期）のことを「基本周波数」といい、そのn倍の周波数を「n倍周波数」という。音の場合、基本周波数のことを「基音」、そのn倍の音のことを「第n（自然）倍音（harmonics）」\footnote{「上音（overtone）」ということもある。}。基音は第1倍音でもある。ひとつの正弦波は、極めて単純な波形でしかないが、基本周波数の正弦波にn倍周波数の正弦波を重ね合せて（加えて）いくことで、より複雑な振動を表現することができる。このことを「加算合成」という。例えば基本周波数にその整数倍の正弦波を加えていくことで「三角（鋸歯状）波」をつくることができ、奇数倍の正弦波を加えていくことで「方形波」をつくることができる。重ね合わせる正弦波を倍音に限らず、任意の周波数の正弦波に拡げれば、加算合成によって、さらに複雑な波形をつくりだすことができる。一般に、単一の周波数の正弦波からなる音を「純音」と呼び\footnote{理論的な純音は永遠に続く正弦波であるが、現実には不可能なので、ある一定時間続く正弦波の一部も（疑似）純音の内に含めることがある。}、純音の複数の重ね合せによって、時間的に複雑な変化をする音を「複合音」と呼ぶ。私たちが普段耳にしたり、コミュニケーションに使っている音声のほとんどは、複合音である。これまで、音を時間（あるいは空間）を基準に、空気の圧力の時間的/空間的変動に対応する、波形を用いて表現してきた。画像も、ドットの有無やピクセルの明るさという、空間的な波形（波面）で表現した。これらを「時空間領域」における表現という。それに対して、加算合成の考え方を使って、ある振動波形を、いくつかの正弦波の重ね合わせによって表現することができれば、その波形を正弦波を特定するパラメータである「周波数」と「振幅」「位相」の組によって表現することができる。振動を構成する正弦波の周波数を基準に表現することを「周波数領域」における、あるいは「周波数成分」による表現という。周波数領域において振動は、横軸に周波数、縦軸にその大きさ（振幅）や位相をとった「スペクトル」と呼ばれるグラフを用いて表される\footnote{位相については省略されることも多い。}。スペクトルとは、ある振動の中に含まれる、すべての正弦波の分布を表現したものである。\begin{figure}[htbp]\caption{\label{fig:additvesin}正弦波の加算}\end{figure}\section{フーリエ変換}正弦波による加算合成の逆――「同じ波形を繰り返す周期的な振動は、どんなに複雑なものでも正弦波の重ね合せで表わすことができる」ということが数学的に証明されている。証明したのは、19世紀のフランスの数理物理学者、ジョセフ・フーリエ（1768～1830）である。フーリエの証明の対象は、周期的な波形に限られてはいるが、周期を充分大きくとれば、いかなる波形でも、正弦波の重ね合せで表現できることになる。同時に、フーリエの証明の対象は連続的な波形には限られていない。値が瞬間的に変化する不連続な波形も、正弦波の無限の重ね合せで表わすことができる。連続的な正弦波の重ね合せで、不連続な波形が表現できる、というのは直感に反するところもあるが、これは数学における「無限」のマジックの一つである。任意の波形を正弦波の重ね合せ、つまり正弦波の周波数と振幅、位相の組による表現に変換することを「フーリエ変換」という。その逆に複数の正弦波を重ね合せて波形を生成することを「逆フーリエ変換」という。時空間領域における任意の振動波形をフーリエ変換することで、それを周波数領域におけるスペクトルに変換することができる。時空間領域と周波数領域は、相互に変換可能である。\section{音の知覚と耳の構造}音は空気の圧力変動（粗密波）をその発端としてはいるが、それだけで音になるわけではない。まず、圧力変動の振幅や周波数がある範囲内（可聴域）であり、それを刺激として身体のどこか（音の場合、主に耳）で感知しなければならない。音は、物理的な現象とそれにもとづいて身体や脳が創造する感覚、すなわち知覚の相乗的な共同作業から生まれる。音の物理的な特性のみならず、人間の知覚の特性について知ることも重要である。例えば、私たちが聴くことのできる最小音の大きさは周波数によって異なる。個人差はあるが、平均的には2～5000ヘルツ、特に4000ヘルツ付近の感度が高い。それより低い音のばあいでも、高い音の場合でも、感度は低下する。これは、物理的に同じ大きさの音でも、その周波数によって、人間が知覚する音の大きさは変化する、ということを意味している\footnote{人間の聴覚の特性については、例えば\cite{pierce}に詳しい。}。\begin{figure}[htbp]\caption{\label{fig:isovolume}等音量曲線}\end{figure}耳の構造と音の知覚は深く関連している。人間の頭部に到達した音はまず、ロート状の耳介（耳たぶ）によって収集され、皮膚で被われたチューブ状の外耳道を通過した後、鼓膜を振動させる。耳介から外耳道を経て鼓膜までの部分を外耳と呼んでいる。外耳道の長さは約25mmで、3400ヘルツの音の1/4波長に相当する。そのため外耳道は、2～5000ヘルツの音を共鳴現象によって増幅する。人間の耳の感度は、この外耳道の音響的特性に強く影響を受けている。また、人間の頭部の直径は約18cmであるので、18cmよりも長い波長の音、すなわち約2000ヘルツよりも高い音は、頭部の反射により、反対側の耳介には到達しにくい。逆にそれ以下の音は、どこで鳴ったとしても両方の耳介に到達する。この頭部による物理的な特性が、音の方向知覚（音源定位）に大きな影響を与えている。一般に高い音の方が音の方向感覚が鋭く、その知覚は主に、両耳の耳介に届く音の相違によって生みだされる。鼓膜に到達した振動は、鼓膜が接着している槌（つち）骨にまず伝わり、次に砧（きぬた）骨、鐙（あぶみ）骨と、この3つの小さな骨からなる中耳の耳小骨連鎖を介して、蝸牛へと伝わる。この耳小骨連鎖はテコの原理によって、外耳の音を約22倍（27dB）に増幅して蝸牛に伝える。なお、中耳は耳管によって上咽頭（鼻の奥）とつながっていて、内部の気圧が外気圧と等しくなるように調節されている。風邪をひいたときに耳の具合がおかしくなったり、電車が急にトンネルに入ると耳がツーンとしたりするのは、中耳内の気圧と外気圧とのバランスが崩れたために起こる現象である。耳管はふだんは閉じているが、ものを飲みこんだり、あくびをしたときなどに開くので、唾を飲み込んだりして耳管を開いてやると中耳内の気圧が外気圧と等しくなり、再び音がよく聞こえるよう（音を伝えるのに適した状態）になる。耳管は中耳内の排出物を外へ排泄するはたらきももっている。\begin{figure}[htbp]\caption{\label{fig:humanear}耳の構造}\end{figure}内耳にあるカタツムリのようなラセン状の蝸牛が、最終的な音受容器として働いている。ヒトの蝸牛は約2周半あり、その長さは約30mmである。蝸牛の内部は前庭階、鼓室階、中央階の３つの管からなり、まっすぐに引き伸ばすと、先細りのかたちになっている。蝸牛の内部は、リンパ液で満たされている。蝸牛は、基底膜によって2つに仕切られている。2つの空間は蝸牛の先の方にある蝸牛孔によってつながっている。蝸牛の起点には基底膜をはさんで2つの穴（前庭窓と蝸牛窓）があり、前庭窓は中耳の鐙骨と接続している。鐙骨の振動で前庭窓が振動すると、蝸牛内のリンパ液も振動し、リンパ液の振動は進行波となって蝸牛の基部から先端部に向かって伝播する。それにつれて、基底膜も基部から先端部へと振動する。高い音は入ってすぐに減衰するのに対し、低い音は先端部まで到達する。すなわち、基底膜の基部が高周波音に同調し、先端部になるにつれて低周波音に同調する。このことで、音の周波数と場所が関係づけられる。基底膜の振動は、膜上それぞれの位置にある有毛細胞によって電気パルスに変換され、聴神経（蝸牛神経）を通して脳へ送られる\footnote{内耳には蝸牛だけでなく、からだのバランスを保つはたらきと関連した、平衡器官としての前庭および半規管がある。半規管は三つあるので三半規管といわれ、回転加速度で刺激され、頭やからだがどの程度動いたか、またどのように動いたかを感じとる。前庭には耳石器（卵形嚢、球形嚢）といわれる器官があり、重力、遠心力、直線加速度、頭の位置などの外部からの刺激を感じとる。からだを何回もぐるぐる回したときにめまいがするのは、三半規管が刺激されたためであり、エレベーターなどで上がったり下りたりする感覚を感じとるのは耳石器である。 }。基底膜の基部は、幅が狭く分厚い。反対に、基底膜の先端部は、幅が広く薄い。このような構造は、基部が高周波音、先端部が低周波音に同調するのに都合よい。音や聴覚に関する数値情報は、周波数軸を対数表示することが多い。その理由のひとつは、基底膜上での周波数の間隔が対数的になっているからである。\begin{figure}[htbp]\caption{\label{fig:innerear}内耳と蝸牛}\end{figure}外界から耳に入る、時空間領域における聴覚刺激パターンとしての複合音は、最終的には蝸牛によって、各周波数成分に分解されたのちに知覚化される。フーリエ変換は単なる数学的操作ではない。人間の耳には、蝸牛という小型のバイオ＝フーリエ変換装置が備わっていて、時空間領域における物理的現象を、周波数領域に変換して知覚している。私たちが、複合音の低次の倍音を分離して聞き取ることができたり、周波数があまり近くないいくつかの純音が同時に呈示されたときに、それらを1つの複合音としてではなく、それぞれ別個の音として知覚できるのは、このためである\cite{moore}。フーリエ変換という数学的モデル、そして周波数領域における音の操作は、人間の知覚（聴覚）そのものの操作とも、深く結び付いている。\section{光の知覚と眼の構造}眼は、直径わずか20mm程度の小さい球（眼球）である。その構造は、カメラに似ている\cite{ikeda}。カメラのレンズに相当するのが水晶体、絞りは瞳、そしてフィルムが網膜に対応している。水晶体自体が膨れたり、偏平になることでピントを合わせ、瞳の大きさが2～8mmに変化することで、光量を調節する。\begin{figure}[htbp]\caption{\label{fig:humaneye}眼の構造}\end{figure}眼の解像度（2つのものを空間的に分離して視ることができる最小の間隔）のことを視力という。数値的には、解像度を眼から望む角度（分）の逆数で表わす。視力が1.0であるということは、解像度が1分である、ということだ。視力2.0は解像度0.5分（30秒）、視力0.5は解像度2分、ということになる。光の強さ（明るさ）を表わすのが「照度」である。その単位は、ルクス（lx）で、 1平方メートル当たりに、1ルーメンの光束が照射しているときの明るさが、1ルクスであるとされる。太陽光のもとでは、かんかん照りの直射日光下が1～10万ルクス、曇りや雨だと100～1000ルクス、満月の晩が0.1ルクス、三日月だと0.01ルクス、星のみだと0.001ルクス程度である。直射日光と新月の夜の照度の比は、おおよそ1億（$10^8$＝100メガ）倍、デシベル換算で約160dB（人間の耳のS/N比の約10倍）になる。このような広い範囲の明るさに対応するために、網膜の一番奥に並んでいる視細胞という光の受容器は、錐体（すいたい）と桿体（かんたい）という2つの細胞からなる2重構造をしている。感度の低い錐体が明るい光、感度の高い桿体が暗い光をそれぞれ担当する。眼はいわば、感度の違う相補的な2種類のフィルムを内蔵するカメラである。可視光の波長は約400ナノメートル（1ミリの1万分の4）から700ナノメートルの範囲である。私たちの生活光の源である太陽光の場合、もっともエネルギーの高い波長は460ナノメートルであり、それより短い波長側ではエネルギーは急激に低下して、紫外域の300ナノメートルではほとんど0になる。長い波長側でも、エネルギーは次第に減少していく。人間の視覚の特性は、太陽光のエネルギー分布と深く関連している。光の波長の違いは色に対応している。 400ナノメートル近くの短い波長の光（単色光）は紫色に見え、 700ナノメートル近くの長い波長の光は赤く見える。その間を埋めるのが、赤、橙、黄、緑、青、藍、紫という、いわゆる虹の七色である。しかし同時に、眼には「三色性」という重要な性質がある。どのような色でも、たった3つの色でつくりだすことができる。例えば、赤、緑、青の3色の光の強さを加減して加えることで、さまざまな色が表現できる。 RGBディスプレイの原理である。\begin{figure}[htbp]\caption{\label{fig:spectrumcolor}色とスペクトル}\end{figure}アイザック・ニュートンは『光学』の中で、「光線に色がついているのではない（Rays are not coloured.）」と書いている。色の知覚は、人間の眼の側に、その仕組みがある。まず、色を感じるのは錐体細胞だけである。桿体細胞は、錐体細胞に比べると解像度も低く、そのうえ色も感じない。暗くなると色が見えにくくなるのは、そのためである。私たちの周りにある音の多くが複合音であるのと同様に、私たちの周りの光のほとんどは単色光ではなく、さまざまな色の混ざりあった複合（スペクトル）光である。音の場合、複合音を人工的に作り出すためには、すべての周波数成分について重ね合せる必要がある。知覚の側には、マスキング効果\footnote{ある周波数の音やノイズが、特定の周波数の音を聞こえなくさせる効果のこと\cite{moore}。}のような、いくつかの固有の性質があるものの、基本的には蝸牛のフーリエ変換機能により、 音程（周波数）の異なる2つの音が同時に鳴った場合でも、その合成音を2つの音として別々に聞き分けることができる。ドとミの音を一緒に鳴らしたらレに聞こえる、などということはない。それに対して色の場合、いくつかの色を重ね合せる\footnote{このことを「加色混合」という。これに対して、ある特定の波長の光を吸収することで、さまざまな色を作り出す方法を「減色混合」という。}ことで、別の色を生みだすことができる。重ね合せてつくられた色は、単一の波長によるスペクトル光によりつくりだされた同じ色と、見分けがつかない。重ね合せによってつくられた色は、もともとの色に分解することができない。さらに、すべての色を、わずか3つの色の重ね合せだけでつくることができる。これを眼の「三色性」という\cite{ikeda}。一般的には、3つの色としては赤・緑・青が採用される。赤・緑・青の小さい蛍光物質を規則正しくびっしり並べ、これらに電子を当てることでさまざまな色をつくりだす、テレビやコンピュータのRGBディスプレイの原理である。\begin{figure}[htbp]\caption{\label{fig:threecolors}眼の三色性と加色混合}\end{figure}色を感じる錐体細胞には、長波長域（赤）、中波長域（緑）、短波長域（青）それぞれの光に対する感度の高い、3つの種類がある。それぞれの錐体細胞の出力をもとに、いくつかの処理が行われることで、色が知覚される。音の場合、さまざまな周波数からなる複合音は、蝸牛によって、連続的なスペクトルに分解されて知覚されるのに対して、色の場合はわずか3つの特定の周波数域にしか分解されない。音と色の知覚の違いは、耳と眼という、それぞれの主たる知覚装置の構造の違いに、由来している。\section{眼で聞く、耳で見る}ちょっとした思考実験をしてみよう。「もし、耳が眼のように働いたら音はどう聞えるか」「もし、眼が耳のように働いたら色はどう見えるか」もし耳が眼のように働いたらどうなるだろう？ 耳が「三音性」を持っていると仮定してみるのだ。つまり、わずか3つの波長の正弦波のみから、あらゆる音程の音がつくりだせることとする。現在のオーディオ装置は、なるべく広い（時として人間の可聴域を超えた）帯域の均一なレベルの再生を目指している。そのために、複数のサイズや特性をもったスピーカーを組み合わせるマルチウェイという方式が良く用いられる。もし耳に「三音性」があれば、オーディオ再生装置は、たった3つの周波数の正弦波だけを発生すればよい 3ウェイオッシレータにとってかわられるだろう。逆にもし、眼が耳のように働いたらどうなるだろう？ 眼が光を連続的なスペクトルのまま知覚できると仮定してみるのだ。すると、現在のRGBディスプレイは、単なる3色のパターンの明滅にしか見えない。周囲の極彩色の天然色の世界とは、似ても似つかない。その代わりに、あらゆる波長をまんべんなく発光することを目指した、ハイファイ・ディスプレイの開発が進められるだろう。オーディオの世界と同様に、可聴域外の光を発生する装置も必要となるかもしれない。超低音を再生するサブウーファーに相当する赤外線発生器や、超高音を再生するスーパートゥイータに相当する紫外線発生器である。\section{点と線から面へ}物理的な時空間、そして人間の知覚の特性とも深く結び付いた周波数スペクトルの2つの領域を相互に行き来しながら、幾何学の概念、あるいはカンディンスキーの著書\cite{kandinsky}を参考に、点、そして線から出発してみたい。\subsection{点と線}\begin{quote}幾何学の点は目に見えない存在である。それを定義すれば非物質的な存在ということになる。物質的に考えるとゼロの点である。\end{quote}\begin{quote}幾何学の線は目に見えない存在である。それは動く点の軌跡であり、その所産である。線は運動から生まれ、――点の自己完結した、最高の静止を否定することから生まれる。ここに静止的なものから運動的なものへの飛躍がある。したがった、線は――点という絵画的原要素に対する最大の反対物である。もっと正確にいえば、線は二次的な要素であるといえる。\cite{kandinsky}\end{quote}点は、もっともシンプルな表現の要素であり、より複雑な表現のプリミティヴでもある。数学的な点は、大きさや面積を持たない抽象的な概念であるが、デジタル表現における点は、ある大きさや面積、あるいは時間を持った、有限の実体であり、それぞれにひとつの数が対応している。デジタル表現における点とは、すなわちひとつの数字である。時空間領域のプリミティヴとしての点は、聴覚的にはオン＝オフのクリック音、視覚的には白黒のドット、あるいはピクセルである。時空間領域におけるデジタル音は、クリックの時間的な連鎖であり、デジタル画像（ビットマップ）はドットの集合体である。\begin{figure}[htbp]\caption{\label{fig:clickdot}クリックとドット}\end{figure}周波数領域上の1つの数字に相当する点\footnote{周波数領域における点は「線スペクトル」と呼ばれる。}は、ある特定の周波数と振幅をもった正弦波（純音）である。円運動（回転）をベースにした正弦波は、デジタル（離散）的なクリック音に比べて、アナログ（連続）的な要素であり、デジタル上では、常に近似値でしか表現できない\footnote{通常は事前に近似値テーブルを用意し、それを補間しながら生成させる。}。数学的に理想化された、持続時間が0のクリック（パルス）は、周波数領域ではごく弱いが、平坦な連続スペクトルをもつ\footnote{連続スペクトルは、周波数領域上における線である。}。孤立したクリックはすべての周波数を含む、極めて豊かな音である。デジタル表現上でのクリックは、理想化された数学的なクリックとは異なり、最小でもサンプリング周波数に依存した有限の持続時間をもつ。とはいえ、このデジタル（有限）クリックをフーリエ変換すると、全周波数領域（0～ナイキスト周波数）に広く分散した、周波数スペクトルが得られる（図\ref{fig:clickspectrum}）。点から線への変換である。\begin{figure}[htbp]\caption{\label{fig:clickspectrum}クリック音のフーリエ変換}\end{figure}クリックの周期的反復であるクリック列には、反復周期に相当する基音と、それに等しい大きさを持った全倍音成分が含まれている。クリック列は、時空間領域、周波数領域の両方共で「点列」として表現される。クリック列の持続時間を次第に引き伸ばすことで、すなわち点を引き伸ばして線とすることで、パルス波や矩形波（パルス幅が50\%のパルス波）が生まれる。矩形波のスペクトルは、基音と、次数が高くなるにつれて次第に減少していく奇数次の倍音列からなる線スペクトルである。同様に、時空間領域で、点を斜めに引き伸ばすことで生まれる三角形の波形をもつ鋸状（ノコギリ）波も、周波数領域では、基音と、次数が高くなるにつれて次第に減少していく全倍音列からなる線スペクトルである。\begin{figure}[htbp]\caption{\label{fig:rectangle}パルス波と矩形波}\end{figure}\begin{figure}[htbp]\caption{\label{fig:saw}ノコギリ波}\end{figure}周波数領域における、もっとも単純な線、すなわち水平な直線は、すべての周波数成分を均等に含む振動である。すべての波長を含む光が白く見えることのアナロジーで、この振動のことを白色雑音（ホワイトノイズ）と呼ぶ。非周期的な単一のクリックとホワイトノイズのスペクトルは、周波数全域に渡って振幅一定の相似形である\footnote{振動の振幅を周波数の関数として表わしたものを「振幅スペクトル」といい、振動の位相を周波数の関数として表わしたものを「位相スペクトル」という。単独のクリックとホワイトノイズは、同じ形の振幅スペクトルをもつが、位相スペクトルは異なる。ホワイトノイズの位相スペクトルはランダムに分布しているが、クリックの場合、全成分がクリックの発生時刻で最大振幅をもつような分布になる。}。同様に、すべての周波数成分を含まない（すべての周波数領域の振幅が０の）沈黙（サイレンス）は、時間領域においても、周波数領域においても、０の羅列からなる「線」である。クリックも白色雑音も、非周期的な音である。純音、クリック列、矩形波のような周期的な音の多くが線スペクトル（点）をもつのに対して、クリックやホワイトノイズのような非周期音は、多くの場合連続スペクトルをもつ\footnote{非調和（非倍音）関係にあるような複数の純音の重ね合せは、非周期音であるにもかかわらず線スペクトルをもつ。}。正弦波の一部を、ごく短い時間だけ取り出した、非周期的なトーンバースト（トーンパルス）のスペクトルも、もとの正弦波の周波数の周辺領域に広くわたって振幅が分布する、連続スペクトルになる。聴覚上でも、トーンバーストの持続時間が短くなればなるほど、正弦波の音がクリックのような音に変化していく。＜画像の場合＞時間領域と周波数領域の関係は、素材と耳の関係、つまり数と知覚の関係であり、音におけるデジタルとアナログの関係でもある。周波数領域における「点（しかしこれは線スペクトルと呼ばれる）」はサイン波である。サイン波はしばしば「純音」と呼ばれる。しかしサイン波はあくまでアナログな耳からみた純音であって、デジタルな素材からみれば決して純な音ではない。むしろデジタル・マテリアリズム的には、ひとつの数字としてのクリック音こそを純音と呼ぶべきである。デジタルな素材の直接操作と、人間の知覚の間には、単純には推測できない非線形なミッシング・リンクがある。例えば、デジタル表現においては、人間の耳の基本要素（音の原子）であるサイン波よりも、パルス波、ノコギリ波の方がよりシンプルかつ基本的である。三角関数やπは単純な整数ではない。しかしだからこそ、素材の単純な操作から、知覚に対する思いもかけない程の大きな影響が得られることもある。数と知覚の関係は、かけ離れているからこそ面白い。時間領域における点：クリック音、クリック列時間領域における線：サイレンス、パルス波/ノコギリ波周波数領域における点：サイン波、パルス波/ノコギリ波、クリック列周波数領域における線：サイレンス、クリック音、ノイズ画像（空間軸、周波数軸）\subsection{面}音ソノグラム（周波数領域）画像\chapter{アルゴリズム}数を介して表現を変換する（アルゴリズム）音楽は「周波数の数学」とも呼ばれている。\begin{thebibliography}{99}\bibitem{rheingold}H.ラインゴールド『思考のための道具――異端の天才たちはコンピュータに何を求めたか？』栗田昭平監訳，青木真美訳，パーソナルメディア，1987．\bibitem{benedikt}M.ベネディクト『サイバースペース』NTTヒューマンインタフェース研究所，鈴木 圭介，山田 和子訳，NTT出版，1994.\bibitem{norman}D.A.ノーマン『パソコンを隠せ、アナログ発想でいこう――複雑さに別れを告げ、＜情報アプライアンス＞へ』岡本明，安村通晃，伊賀聡一郎訳，新曜社，2000．\bibitem{dewdney}A.K.デュードニー『チューリングオムニバス――第2巻 計算理論』足立暁生訳，東京電機大学出版局，1993．\bibitem{lanczos}C.ランツォス『数とはなにか――不思議の国のアリスの世界へ』米田桂三訳，講談社ブルーバックス269，1975．\bibitem{cage}J.ケージ『小鳥たちのために』青山マミ訳，青土社，1982．\bibitem{kittler}F.キットラー，S.ブンツ『キットラー対話――ルフトブリュッケ広場』前田良三，原 克訳，三元社，1999．\bibitem{corbusier}L.コルビュジェ『モデュロール I/II』吉阪隆正訳，鹿島出版会，1976．\bibitem{negroponte}N.ネグロポンテ『ビーイング・デジタル――ビットの時代』西 和彦監訳，福岡洋一訳，アスキー出版局，1995．\bibitem{ikeda}池田光男『眼はなにを見ているか――視覚系の情報処理』平凡社自然叢書8，1988．\bibitem{levy}S.レヴィ『マッキントッシュ物語――僕らを変えたコンピュータ』武舎広幸訳，翔泳社，1994．\bibitem{postscript}アドビ・システムズ『PostScript チュートリアル＆クックブック』野中浩一訳，アスキー出版局，1989．\bibitem{ohkura}大蔵康義『音と音楽の基礎知識』国書刊行会，1999．\bibitem{yasuoka}安岡孝一，安岡素子『文字コードの世界』東京電機大学出版局，1999．\bibitem{tomita}富田倫生『パソコン創世記』TBSブリタニカ，1994（http://www.voyager.co.jp/neb/NEWGPC/）．\bibitem{hardison}O.B.ハーディソン『天窓を抜けて消えていく：20世紀の文化とテクノロジー』下野隆生，水野精子訳，白揚社，1993．\bibitem{mukai}向井周太郎『かたちのセミオシス』思潮社，1986．\bibitem{stockhausen}カールハインツ・シュトックハウゼン『電子音楽の四つの特徴』ユリイカ3月号，青土社，1998．\bibitem{pierce}J.R.ピアース『音楽の科学：クラシックからコンピュータ音楽まで』村上陽一郎訳，日経サイエンス社，1989．\bibitem{moore}B.C.J.ムーア『聴覚心理学概論』大串健吾監訳，誠信書房，1994．\bibitem{kandinsky}W.カンディンスキー『点と線から面へ（バウハウス叢書9）』宮島久雄訳，中央公論美術出版，1995．\end{thebibliography}\end{document}数の特徴「量」「速度」「抽象性」「演算性」＝＝＝＝＝▼量と速度▼表現と数（データ構造）▼モデル▼対象の表現▼ビットマップ表現（ペイント系）▼座標表現（ドロー系）▼色の表現（RGB）▼サンプリング（標本化）▼量子化と符号化文字（テキスト）文字コードフェイスマークアスキーアートコンクリート・ポエトリーフォント生成と変換表現を数に変換する（デジタル化）数から表現を生成する（アナログ化）数を介して表現を変換する（DSP）数にまで還元することで表現形式の壁を乗り越える時間/空間領域と周波数領域フーリエ変換時間と周波数空間と周波数フーリエ変換と知覚聴覚視覚点音（時間軸、周波数軸）時間領域：クリック音、クリック列周波数領域：サイン波、パルス波/ノコギリ波、クリック列画像（空間軸、周波数軸）線音時間領域：サイレンス、パルス波/ノコギリ波周波数領域：サイレンス、クリック音、ノイズ画像面音ソノグラム（周波数領域）画像数の操作（アルゴリズム）演算命令（コマンド）シーケンス変数数と数を関係づけるアルゴリズムの第一歩抽象化コマンドのグループ化グループに名前をつける言語の習得グループの階層化反復（ループ）リズムの生成点の運動の軌跡としての円条件分岐変化（バリエーション）反復と再帰分散/並列点の集合としての円グラフを描くライフゲーム（動くビットマップ）分散と反復の互換性ダイナミックに円を描く外的視点と内的視点グリッチ（不都合）アルゴリズムに内在する構造差異の顕在化運動と時間デジタルの時間＝有限の時間＝瞬間（ゼロ時間）はないDSP（数を介した表現の変換）数からのアプローチ（時間/空間領域）四則演算知覚からのアプローチ（周波数領域）フィルターピッチ・シフティング/タイム・ストレッチング（周波数領域）グラニューラ・シンセシス（時間領域）おわりにデータ構造とアルゴリズム付録StarLogoMAX/MSP/natoデジタル美学デジタリズムダダ未来派シュールリアリズム数の物質化、オブジェ化物質＝アナログ的シミュレーション、メタファーとしてのデジタル素材としてのデジタルメタファーを用いない「切断」数値（numerical）数学（mathematical）リアリティーとは何か？定量性、測定可能性高速な計算マシン、ハワード・ラインゴールドの著書名\cite{rheingold}にあるように「思考のための道具」書や、道具は人間の手足の延長、あるいは拡張である、というマーシャル・マクルーハンの拡張理論\cite{media}のように、コンピュータは、\bibitem{rheingold}H.ラインゴールド『思考のための道具――異端の天才たちはコンピュータに何を求めたか？』栗田昭平監訳，青木真美訳，パーソナルメディア，1987．\bibitem{media}M.マクルーハン『メディア論――人間の拡張の諸相』栗原裕，河本仲聖訳，みすず書房，1987．何かを表現しようとするもの、あるいは、僕らの想像力を刺激しその可能性を広げようとするものにとって、コンピュータを人間の延長としての道具することに、一体どういう意味があるのだろうか？コンピュータをもっと人間から離れた、道具以外のものとしてとらえることはできないのだろうか？ビットマップはデジタル画像表現の基本である。クラフトワークのウェブページ（http://www.kraftwerk.com\footnote{ http://www.kraftwerk.de にも、別のウェブページがある}）にある、2つの画像ファイルをみてみよう。なにやら、きざきざした感じの荒いイメージである。ソースコードを見てみると、それぞれのファイルが読み込まれている部分には、\begin{verbatim}<IMG SRC="kraftwerk.gif" ALT="KRAFTWERK" ALIGN="BOTTOM" WIDTH="486" HEIGHT="54"><IMG SRC="antenne.gif" ALT="Antenne" BORDER="0" WIDTH="570" HEIGHT="400">\end{verbatim}と書かれている。これらは一見大きな画像に見えるが、実は、 kraftwerk.gif の方は、わずか 83×11ドット、 antenne.gif の方が285×200ドットの小さなものである。小さな画像を拡大することで、ピットマップのドットやグリッドの質感を強調している。kraftwerk.gif の方は、縦が5倍弱、横が6倍弱の拡大率、 antenne.gif の方は縦横共にちょうど2倍の拡大率である。 kraftwerk.gifのサイズはわずか199バイト、 antenne.gifはアニメーションにもかかわらず 12033バイトという小さなサイズであるため、この画像表示の部分の読み込み～表示はとても軽快だ。軽快であることは重要だ。なぜなら軽快さは、表現が素材の特性に合っていることの反映でもあるからだ。素材の特性を無視して無理をすればするほど、どうしても余分な処理が増えて重くなる。それは決してエレガントなやりかたとはいえない。図＊ http://www.kraftwerk.com（のスナップショット）図＊ kraftwerk.gif と antenne.gifビデオゲームの世界でも、アイコンのような、小さなグラフィックスのデザインが、ゲーム全体の「ルック・アンド・フィール」を生み出すために重視されている。ここでもキャラクターの微妙な動きや表情、背景のニュアンスは、ブラウン管上での色のにじみまで考慮したドット単位のデザインから生まれる。そんな職人デザイナーたちは「ドッター」と呼ばれている。5 dots という名前の、縦横5ドットずつでつくられたミニマルなフォントもいい。フォーマット＝データ構造

■アルゴリズムの社会プログラムとインプロヴィゼーション→アルゴリズミック・インプロヴィゼーションデジタル表現＝データ＋アルゴリズム・データ→対象(素材)/オブジェクト→データの不確定性・アルゴリズム→操作/プロセス→アルゴリズムの可能性アルゴリズム＝構造＋パラメータ：・インターフェイス＝アルゴリズムに対する介入手段・パラメータというディテール→神はパラメータに宿るリアルタイム性(リアルタイムなデジタル表現)・プログラムの全体構造(デザイン)の問題・インターフェイスの問題プログラム：静的なコンポジションのための記述言語→動的なインプロヴィゼーションのための環境インプロヴィゼーション＝ジャズのアプローチ→コンポジションからいかにアウト(逸脱)していくか？コンポジション的アプローチ：・事前にきちんと設計して、エラー(バグ)なく実装する(プログラム＝境界を設定すること)(プログラムから見れば)人間＝バグ・統合的プログラム＝全体の記述→明確な境界＝仮説の実現(シミュレーション)インプロヴィゼーション的アプローチ＝分散（非中央集権）的アプローチ：・非統合的プログラム＝部分の記述→曖昧な境界＝仮説の逸脱と変容・多数のマイクロアルゴリズムの集合体が全体をつくりあげる・アルゴリズムの量と速度が重要×モノシリックなプログラム→モジュール化されたプログラム→プログラムを非統合的に使う→部分から全体をつくる×独立したインターフェイス→インターフェイスを構造の中に埋め込む→使えるものは何でもつかう▼基本的戦略・数からのアルゴリズミックな生成(サウンドファイルを使わない)・オーディオ/ビジュアル(＋テキスト)・モジュール化＝マイクロアルゴリズム(の集合体)＝並列分散的アプローチ・ダイナミックな実行→モジュールの起動と停止→ダイナミックなオブジェクト生成→モジュール間のコミュニケーション→グローバルなパラメータ・アルゴリズムのアーカイヴ(背景：プログラム(プロセス)のサンプリング)→パラメータの重要性max/msp/nato/jitter・音響と映像の対等な環境・ビジュアルプログラミング言語＝インターフェイスの構造への埋め込みが可能・インタープリタ言語＝動的なプログラムの起動や改変が可能インターフェイスとインタラクション：・プログラムを書くだけでは不十分・プログラムの演奏＝スキルの重要性・クリシェとしてのマイクロアルゴリズム→筋肉としてのアルゴリズム・コンピュータの創造性＝職人の創造性→手の消滅と非人間中心主義・適合のインターフェイスから逸脱と変容のインターフェイスへコンピュータを使ったパフォーマンス（リアルタイム表現）

コンピュータは楽器である。
コンピュータは楽譜である。
コンピュータは演奏者である。
…

アルゴリズム（プログラム）
インターフェイス

コンポジション（作曲）
インプロヴィゼーション（即興）

アルゴリズミック・コンポジション

アルゴリズミック・インプロヴィゼーション？

境界を定める

境界からの逸脱

アルゴリズム＝構造＋パラメータ

コンポジション＝静的な構造
インプロヴィゼーション＝動的な構造

全体の整合性
エラー（バグ）のない実装
統合的なアプローチ

構造の柔軟性（選択肢の多様性）
状況への対応（逸脱の可能性）

非統合的なアプローチ
全体を（なるべく）記述しない＝部分の集合体
→いかに境界を曖昧にできるか

論理的に同一である
知覚的に同一である

マイクロアルゴリズム（アルゴリズムの社会）
可能な限りプログラムをモジュールに分解する
モジュールを動的に生成、消滅、書き換えたりする

アルゴリズムをディテールに使う

統合的なインターフェイス
分散的なインターフェイス

部分に埋め込まれたインターフェイス

GUI＝WIMP型のインターフェイス

■アルゴリズムの社会 (The Society of Algorithms) sonarsound lecture 021013プログラムとインプロヴィゼーション→アルゴリズミック・インプロヴィゼーションデジタル表現＝データ＋アルゴリズム・データ→対象(素材)/オブジェクト→データの不確定性・アルゴリズム→操作/プロセス→アルゴリズムの可能性アルゴリズム＝構造＋パラメータ：・インターフェイス＝アルゴリズムに対する介入手段・パラメータというディテール→神はパラメータに宿るリアルタイム性(リアルタイムなデジタル表現)・プログラムの全体構造(デザイン)の問題・インターフェイスの問題プログラム：静的なコンポジションのための記述言語→動的なインプロヴィゼーションのための環境インプロヴィゼーション＝ジャズのアプローチ→コンポジションからいかにアウト(逸脱)していくか？コンポジション的アプローチ：・事前にきちんと設計して、エラー(バグ)なく実装する(プログラム＝境界を設定すること)(プログラムから見れば)人間＝バグ・統合的プログラム＝全体の記述→明確な境界＝仮説の実現(シミュレーション)インプロヴィゼーション的アプローチ＝分散（非中央集権）的アプローチ：・非統合的プログラム＝部分の記述→曖昧な境界＝仮説の逸脱と変容・多数のマイクロアルゴリズムの集合体が全体をつくりあげる・アルゴリズムの量と速度が重要×モノシリックなプログラム→モジュール化されたプログラム→プログラムを非統合的に使う→部分から全体をつくる×独立したインターフェイス→インターフェイスを構造の中に埋め込む→使えるものは何でもつかう▼基本的戦略・数からのアルゴリズミックな生成(サウンドファイルを使わない)・オーディオ/ビジュアル(＋テキスト)・モジュール化＝マイクロアルゴリズム(の集合体)＝並列分散的アプローチ・ダイナミックな実行→モジュールの起動と停止→ダイナミックなオブジェクト生成→モジュール間のコミュニケーション→グローバルなパラメータ・アルゴリズムのアーカイヴ(背景：プログラム(プロセス)のサンプリング)→パラメータの重要性max/msp/nato/jitter・音響と映像の対等な環境・ビジュアルプログラミング言語＝インターフェイスの構造への埋め込みが可能・インタープリタ言語＝動的なプログラムの起動や改変が可能インターフェイスとインタラクション：・プログラムを書くだけでは不十分・プログラムの演奏＝スキルの重要性・クリシェとしてのマイクロアルゴリズム→筋肉としてのアルゴリズム・コンピュータの創造性＝職人の創造性→手の消滅と非人間中心主義・適合のインターフェイスから逸脱と変容のインターフェイスへ■デジタル・デザイン原論へ向けて (Towards the Principle of Digital Design)sonarsound tokyo 2002 resume021012 akihiro kubota <akihiro.kubota@nifty.ne.jp>▼始めに数ありきデジタル・デザイン：・「コンピュータの数」によるデザイン2つのアプローチ：・ベクタ・データ的アプローチ→抽象→アイデアリズム(観念論)・ラスタ・データ的アプローチ→具体→マテリアリズム(唯物論)コンピュータの数：・有限、可算な数、数値・抽象的な（数学的な）数、シンボルとしての数ではない・膨大な「量」と「速度」をもった数字列（数字塊）・量が意味を剥奪する(デジタル・ダダ)・ディテールが数を物質化するデジタル・マテリアリズム：・ラスタ・データ的アプローチ＝ビットマップ的アプローチ・素材論あるいは対象(オブジェクト)論・数の前ですべての表現は等価になる（形式の不確定性原理）→素材のもうひとつの抽象性・数のアナログ化（観測）がポイント(数と知覚のインターフェイス)周波数領域：・時空間領域＝物質(素材)領域→素材のハッキング・周波数領域＝知覚(身体)領域→知覚のハッキング▼アルゴリズムの社会 (The Society of Algorithms)デジタル表現＝データ＋アルゴリズム：・データ→対象(素材)/オブジェクト・アルゴリズム→操作/プロセス分散（非中央集権）的アプローチ：・統合的プログラム＝全体の記述→明確な境界＝仮説の実現(シミュレーション)・非統合的プログラム＝部分の記述→曖昧な境界＝仮説の逸脱と変容・多数のマイクロアルゴリズムの集合体が全体をつくりあげる・アルゴリズムの量と速度が重要→starlogo/auto-illustratorアルゴリズム＝構造＋パラメータ：・インターフェイス＝アルゴリズムに対する介入手段・パラメータというディテール→神はパラメータに宿るインターフェイスとインタラクション：・プログラム(プロセス)のサンプリング・プログラムを書くだけでは不十分・プログラムの演奏＝スキルの重要性・クリシェとしてのマイクロアルゴリズム→筋肉としてのアルゴリズム・コンピュータの創造性＝職人の創造性→手の消滅と非人間中心主義・適合のインターフェイスから逸脱と変容のインターフェイスへ素材としてのコンピュータ/道具としてのコンピュータ・デジタル・マテリアリズム・メッセージとしてのツール「デジタリズム」というメタカルチャー：・第三機械時代のデザイン・メタファーなしのデザイン■レクチャープログラミングとインプロヴィゼーションプログラミングというのは基本的にコンポジションのための記述言語だとみなされていたプログラム＝境界を設定することジャズのアプローチコンポジションからいかにアウト(逸脱)していくか？事前にきちんと設計して、エラー(バグ)なく実装するコンパイラ言語▼シンポジウムデジタル・テクノロジーそのものは決して新しいものではない。ある種の社会的状況や文化になる→量と速度が必要・リアルタイム・シンセシス革命＝ポストMIDI時代・テクノロジーの個人化/大衆化・量と速度・新しいメタ・カルチャーの萌芽デジタリズム(デジタル主義)メタ抽象主義デジタル・ダダデジタル表現・コピー・エラー時の挙動・表現形式からの独立・大容量と高速度→アルゴリズムデザインデザインはもはや色であるとか形であるとかでは定義できない。アルゴリズム▼レクチャーアルゴリズムとインプロヴィゼーション＝＝＝＝＝『デザイン3.0：メタファーなしのデジタル・デザイン』コンピュータは道具ではないコンピュータは素材であるデジタル化数フォーマット（形式）画像サウンドテキストデジタル・ドメインパーセプチュアル・ドメイ素材の特徴形式からの独立＝「数の前ですべての表現は等価になる」劣化なきコピースキルと形式の関係の解体社会におけるスキルの保存や共有の仕方の変化時空間領域と周波数領域フーリエ変換タイム/スペース・ドメインフリークエンシー・ドメイン→『振動』RGBシュトックハウゼンの音楽の統一理論知覚の特性「もし、耳が目のように働いたら音はどう聞えるか」「もし、目が耳のように働いたら色はどう見えるか」アルゴリズム（操作の抽象、操作の記述）「抽象」対象の抽象操作の抽象＝アルゴリズムデジタル・ドメインにおける操作（演算）知覚大容量性/高速性＝量が質を生み出す（ジョン・ケージ）並列/分散 → 非中央集権的、非逐次的思考非線形/複雑系 → 認知可能性、理解可能性（認知意味論）エラー（グリッチ）ノイズからエラーへシステム（系）エラー時の挙動にメディア（素材）の本質が現われるDesign 3.0Design 1.0 ＝ 第一機械時代（モダニズム）1900～1950Design2.0 ＝ エレクトロニクスと化学の時代＝ポスト・モダニズム（第二機械時代）のデザイン1950～90Design3.01990～デジタル技術の時代＝デジタリズム（第三機械時代）のデザイン意味の解体色や形態からの離脱形式からの解放スキルの再構成手の役割の変化ハッキングアルゴリズムインターフェイス▼デザイン3.0：デジタリズム時代（第三機械時代）のデザイン「コンピュータは素材である（コンピュータは道具ではない）」→デジタル・マテリアリズム(唯物論)→デジタル・デザインにおける素材論デジタル・ドメインとパーセプチュアル・ドメイン→数と知覚のインターフェイス→時空間ドメインと周波数ドメイン▼3つのキーワード・ハッキング＝直接操作→数字列からの発想・アルゴリズム＝手の消滅・インターフェイス＝非人間中心▼ハッキング→はじめに数ありき＝数字の知覚化(表現のデジタル化、ではない)→数の前ですべての表現形式は等価＝素材と形式が独立→メタファーを用いない▼アルゴリズム→デジタル・ドメイン(の操作)とパーセプチュアル・ドメイン→知覚のハッキング→操作(プロセス)の抽象▼表現と抽象・数字列→対象の抽象＝20世紀の表現・アルゴリズム→操作の抽象＝21世紀の表現？▼サンプリング手法の拡がり→オブジェクト(数字列)のサンプリング→プロセス(プログラムやスクリプト)のサンプリング※max/mspメイリングリストで流れているプログラムの例※www.pure-data.orgの例▼アルゴリズムの社会→分散並列処理(非統合的/非逐次的アプローチ)＝全体を記述しない→アルゴリズムの量と速度＝量が質を生み出す→自律した多数のマイクロアルゴリズム(個人)の集合体※starlogoの例※円を書く、というアルゴリズム→中心と半径(コンパス)→分散アルゴリズム→多角形→頂点の数を増やしていく→輪ゴムの原理→相互作用cacrt 100fd 20seth 45fd 10to poly :ntop :distancelet [:angle 360 / :ntop ]repeat :ntop [fd :distancert :angle]end▼筋肉としてのマイクロアルゴリズム→クリシェとスキル＝筋肉の記述(暗黙知)と社会的共有(サンプリング)→パラメータというディテール→ディメンジョン/スケールの記述※ジャズのメタファー▼インターフェイス→非人間中心的発想＝適合(人にあわせる)から逸脱(人が変る)へ→人が変わるインターフェイス＝人間のフレキシビリティへの信頼→欲望が人間を駆動する→インターフェイスを独立して論じることはできない※携帯電話のインターフェイスおまけ▼言語空間としてのインターネット→サイバースペースでやりとりできるものは、すべて言語である  (サイバースペース＝言語の拡張)→デザイン言語の拡張？？？＝＝＝＝＝sonarsound symposium::デジタル・テクノロジーと音楽・映像・アート、そしてデザイン－その現状と今後の行方、さらなる未来のヴィジョン021012 久保田晃弘       コンピュータは道具ではない。コンピュータは素材である。デザインはもう色や形では定義できない。まずはじめに数字列ありき。キーワードはアナログ化こそが重要であるアナログ・アイデアリズムからデジタル・マテリアリズムへアルゴリズミック・コンポジションプログラムを書く、ということは▼ポータブル・デスクトップ＝ポストMIDI時代の作業環境80年代までのコンピュータ音楽のほとんどは、大型で高価な汎用コンピュータ、あるいは世界に数台しかない特殊なコンピュータを使って制作されてきた。そのため、コンピュータ音楽は、アカデミズムやコマーシャリズムといった、政治的、経済的な優位性による特権的な社会を支えている、閉鎖的な文化の影響を色濃く受けていた。一方で、当時次第に普及し始めた汎用のパーソナル・コンピュータの性能はまだ低く、一般の個人が音楽制作に使用できるのは、シンセサイザーやサンプラーといったキーボード形式の専用マシンだけあった。それらはスイッチとしてのキーボードやMIDIのように、平均律の楽譜表現という伝統的音楽モデルの枠組みの中でしか、音楽を制作できなかった。ところが、ここ数年－90年代後半からのパーソナル・コンピュータの処理速度の向上と小型化、メモリーやハードディスクの大容量化と価格の低下、そして個性に満ちたフリーウェアの充実は、デジタル・オーディオという波形レベルの操作をベースにした、リアルタイム・シンセシス環境の充実と発展を促した。シンセサイザーのような専用マシンを用いることなく、安価なパーソナル・コンピュータ一台とリベラルな音楽ソフトウェアさえあれば、リアルタイムの音響生成が自在にできるようになった。20世紀に楽音と騒音の区分けが消失したのと同様に、MIDIとデジタル・オーディオという2つのレイヤーに分けられていた音楽制作のモデルが融合し、パーソナル・コンピュータというだれもが手に取れる楽器の上で、作曲と演奏が分け隔てなく行えるようになった。パーソナルなリアルタイム・シンセシス環境によって、コンピュータ音楽は、MIDIフリーのいわば「ポストMIDI」の時代に入った。音楽を行うために、五線譜の読み書きも、伝統的な楽器演奏のスキルも、もう必須のものではない。まず必要なのは、確かな耳とコンピュータを操作するためのスキルである。そこでは楽音と騒音という区分ではなく、むしろ超低周波音や超高周波音、あるいはクリック/バースト音と持続音、といった、人間の知覚や機械の性能の限界(境界領域)に対する模索と探究に、まずはフォーカスが当てられた。どんな世界でも、閉鎖的な文化はある種の権威と結び付きがちである。パーソナル・コンピュータの、革命的ともいえるほどの性能向上によるリアルタイム・シンセシスの民主化に伴なって、インターネットに根差したオルタナティヴなメタカルチャーが生れた。例えば、mego(http://www.mego.at)falsch(http://fals.ch/)fallt(http://www.fallt.com/).tiln(http://home.rochester.rr.com/tiln/)、notype(http://www.notype.com)underconstructing(http://www.underconstructing.com/)といったサイト周辺の先端的なコンピュータ・ミュージシャンは、ラップトップ・コンピュータを小脇に抱えて世界中を駆け巡り、各所でライブギグを行う。ネットワークで接続された、ポータブルなパーソナル・コンピュータ上でのリアルタイム・シンセシス・テクノロジにより、技術やスキルが拡散し、日常の作業環境をステージに持ち込むことが可能になった。さらに、サウンドファイルというオブジェクトのみならず、プログラムやスクリプトというプロセスも、サンプリングやリミックスが可能になった。久しく概念のみが語られてきた「ワーク・イン・プログレス」が真に現実のものとなり、ライブや展覧会は、デスクトップという常に変化し堆積し続ける制作環境のスナップショットとなった。かつて「ラップトップ・コンピュータは90年代のエレクトリック・ギターである」といわれたが、実際にはそれ以上のものである。ポータブルなデスクトップは、ダイナミックでコラボレイティヴな制作の場であり、保管の場であり、さらに発表の場でもある。▼デジタル・ダダ－新たなメタ・カルチャー＝「デジタリズム」の誕生リアルタイム・シンセシス革命のもうひとつの重要な側面は「デジタル・テクノロジーはあらゆるジャンルに同時にやってきた」ということである。サウンド・シンセシスのみならず、イメージ・シンセシスやビデオ・シンセシス、テキスト・シンセシスの分野でも、同様の劇的な変化が同時に生じ、しかもメイルやウェブといったインターネットの拡がりによって、情報共有のプロセスも以前とは比べものにならないほど即時化し錯綜している。デジタル技術の進歩が音響や音楽という領域のみならず、映像やグラフィックス、立体や空間、建築や都市、詩や小説といった表現形式や分野の壁を超えた、新たな価値観を生みだしつつある。そのための一つのアプローチは、コンピュータをメディアやツールとしてではなく、素材(マテリアル)として捉えることだろう。何かをデジタル化するのではなく、デジタル(数)がまず存在している、というところから出発するのである。デジタル表現を、何かのシミュレーション(ものまね)ではなく、制作の際に相互作用的な対話の対象と考えるのである。例えば、meta.am(http://meta.am/)m9ndfukc.m2cht.fre!(http://www.eusocial.com/)Untitled game/download(http://jodi.org)といったサイトでは、リアリスティックなCG表現や伝統的な楽音の再現といった既成表現のメタファーやシミュレーションではなく、コンピュータという素材から生み出された新しい質感や美学をもった表現が繰り広げられている。それらが今では、形式(ジャンル) を超えたメタ・カルチャーとして、広く共有されている。コンピュータという素材を構成する数字列自体が持っている形式からの独立性、つまりメタ性で思い起こされるのが、ダダ(イズム)という理性を優位におく既成の価値観を否定した反合理主義的運動である。サウンドもイメージもテキストも、コンピュータ上ではそれらのすべてが数値化され、共通の数字列表現となっている。逆にいえば、数字列というデジタル表現は、そのままでは形式として確定していない。こうしたデジタル表現の不確定性によって、表現の持つ価値も同時に解体、無化される。数字列という形式や意味のグランド・ゼロから、もういちど美学を再構築していくこと－それを「デジタル・ダダ」と呼ぶこともできるだろう。あるいはより広く「デジタリズム」というべきかもしれない。ダダが何も意味していないように、メタも何も意味しない。ここで重要な意味を持ってくるのが、数によって解体された表現を再構築するのが、もはや人間の「手」ではなく「アルゴリズム」である、ということだ。人間の身体がもっている数多くの制約に囚われないアルゴリズムの記述(プログラム) を、コンピュータが高速、大量に実行することで、質の変化を引き起こす程の量的表現が生み出される。制作のプロセスを手や指といった身体からいったん引き離し、コンピュータという非身体的、非知覚的な領域にゆだねることで、逆に身体や知覚の新たな可能性や新しい価値を引き出すことができる。プログラミングや操作のミスやパラメータの逸脱から生じるエラー(グリッチ) も、創造のための大きなきっかけや支えになる。cf.  Golan Levin, Lia, Meta, Adrian Ward: 4x4 Generative Design (withAuto-Illustrator, Java, DBN, Lingo) Life/Oblivion, Friends of Ed,ISBN: 1903450470, 2002/01.これまで、絵画とデッサン、音楽と楽器演奏能力/読譜力のように、表現形式と身体的なスキルは一体化していた。そして、そのスキルを保存、伝承するために、伝統的な社会構造が生み出され、固着化してきた。アルゴリズムには、そうした「伝統」という名の、表現のまわりに否応なくまとわりついていた社会構造を再構築する力が秘められている。デジタルというテクノロジーによる、表現の拡散、そして社会の変革は、いまや社会のさまざまな場で、同時多発、分散的かつ着実に起りつつある。＝＝＝＝＝デジタル表現においては、点も、線も、面も、時間も、すべて有限の実体である。大きさのない点、幅のない線、あるいは無限大や無限小、極限や無理数、瞬間といった数学的な諸概念な存在しない。それらは、いわば「アナログ・アイデアリズム（観念論）」の産物である。＝＝＝＝＝デザイン／コンピューター／アルゴリズムシミュレーションいままでのデザインツールやレコーディング機材をコンピューター上にシミュレートすることにより、コンピューターは筆になり、製図台になり、音楽スタジオになった。そして今までは手作業だった一連のデザインプロセスが安易に（かつ安価で）コンピューター上で行えるようになったことにより、コンピューターを使って作品を制作するクリエイターが多くなった。しかし一方で、巷に溢れるグラフィックデザインや音楽は、特定のアーティストのシミュレーション（それは「影響」という言葉に収まるものではない）とも言えるようなものが溢れている。アルゴリズミックコンポジションコンピューターを利用した新たな表現を模索する動きが、いままでコンピューターを道具として使ってきた音楽家やデザイナー達の中から出てきている。それはまさにコンピューターをコンピューターとして認識しようとする流れである。コンピューターミュージックのフィールドでそれは特に顕著である。例えば、MAX/MSPというシンセサイザーをプログラミングする言語がある。いわゆるビジュアル・プログラミング言語にカテゴライズされるMAX/MSPは、周波や乱数といった独立したオブジェクトをコードとよばれる線でつないでいくという方法でアルゴリズムを表記し、リアルタイム・シンセシスを可能にする。つまり特定の法則さえ与えてやれば、後はコンピューターがひたすら自動的に音を生成し続けるというものである。これをアルゴリズミック・コンポジションという。これは、ジョン・ケージのサイコロを振って音階や長さを決めるというメソッドのように、一定のルールを設定した後はまったくどうなるか予想する事が出来ない。そしてその結果として、特定の到達点は無く、無数のバリエーションのみが存在することになる。こういったコンピューター・ミュージックの分野の動きは、近年コンピューター・サイエンスの分野で研究が盛んな複雑系やセル・オートマトンといった分野に共通する部分を持っている。（音を単純な波形の組み合わせに還元するというフーリエ変換は、まさにコンプレクソロジスト達の論理そのものと言えるだろう。）つまり、これらのメソッドは、複雑系の研究同様、非線形性というコンピューターの素材としての特色を非常にうまく利用していると言える。その動きの中でも特にユニークな試みを行っているのが、Ovalことマーカス・ポップである。彼は既存のものとは全く異なる独自の方法論で作曲を行う。それは、故意に傷をつけたＣＤをむりやり再生させて発生したノイズ（デジタル・エラー）をサンプリングしたものをデータベース化し、それを何重にもコラージュすることによって曲を構築するというものである。これを彼はOval Processと呼び、この方法論こそがOvalであるという。つまり、方法論さえ導入すれば誰でもOvalになる事が可能という事になる。最近ではOvalはその方法論をOval Process（開発はdirectorベースらしい）というソフトウェアを開発し、それを利用したインスタレーション等を行っている。（いっそOval Processをフリーで配ってしまえばいいのに。それが出来ないのが、現在の作曲のパラダイムを否定しながらもアーティスト幻想にしがみつくOvalの度胸の無さなのか、とも思う。）　アルゴリズミックデザイングラフィックデザインの分野でも同様の動きがある。イラストレーターのヒロ杉山率いるグラフィックデザインユニットEnlightenmentの作品は、いままでになかったグラフィック感覚（ペチャーとした平面感覚。それはまさに村上隆の提唱する「スーパーフラット」のコンセプトにつながるもの。）で注目を集めている。彼らの作品にどのようなパラメーター操作が働いたのかを分析してみると、写真をコンピューターにより解析し、表面を特定の色数の枠で色面分解し、ベクターデータに変換するという方法がとられているのが分かる。（それはまさにアスキーアートのアルゴリズムを進化させたものであると言えるだろう→fig.1参照）つまり、そのパラメーター操作（アルゴリズム）を様々なモチーフに適応するだけで、簡単に「Enlightenment風」の作品ができあがる。これはジョン前田のポストスクリプトのプログラミングによる作品群や、立花ハジメが自分の作品制作の中で行われる特定のパラメーター操作をAdobeIllustratorのplug-in化し、「信用ベータ」（fig.2参照）として発売するという試みと同様のものである。グラフィック・デザインのフィールドでも、「アルゴリズム」が重視されるようになってきているのだ。これをアルゴリズミック・コンポジションにちなんで、アルゴリズミック・デザインと呼んでみたい。道具から素材へここまで、音楽のフィールドとグラフィックデザインのフィールドからいくつかの例をあげることで、「アルゴリズミックである」という傾向を浮き彫りにしてきた。これは自己組織的方法論を過激に押し進めたものであると同時に「非線形性」や「様々なメディアをデジタルに一元化して扱える」といったコンピューターの素材的特性を、ソフトウェア／インターフェイスの裏側からコントロール（ハック）する試みであり、それはまさに「コンピューターをコンピューターとして活かす、つまりコンピューターを「道具」としてではなく、「素材」として扱う動きなのである。デザインとコンピューターコンピューターはすべてのプロセスをアルゴリズム化する事（プログラミング）を可能にする。それは我々を容易に技巧的修練から解放するものだ。そしてPhotoshopやIllustratorによって、だれもが Designers Republic的なグラフィックを作ることができ、Tomato的なコラージュを作る事ができるようになった。しかし、ソフトウェアは我々にいくかの機能（＝ツール・ボックス）を提示する変わりに、我々を特定のパラダイムに拘束する。なぜならデザインとはパラメーター操作の束であり、これはまさにアルゴリズムに他ならない。そして、いくらかの特定のアルゴリズム（＝ツール・ボックス）の上になりたつソフトウェア(Illustrator, Photoshop, Cubase, Logic etc...）上では、デザインとはその限定されたアルゴリズムの組み合わせでしかなくなってしまうからだ。そしてそれはコンピューター以前のデザインメソッドをシミュレートするものになってしまう場合が多い。近年コンピューター・ミュージックやグラフィック・デザインの領域で見られるような、既存のソフトウェアではなく、まったく新しいアルゴリズムから作品を創作するアルゴリズミック・デザインの動きは、こうしたソフトウェアのツールボックスに依存することによって、極端に似通った作品やコンピューター以前の作品と全く変わらないような作品が氾濫する現在の状況に対する反発と言える。ではコンピューターを利用したデザインとは何なのか。それは新しいアルゴリズム（デザインプロセス）を発見する事に他ならない。つまり、コンピューターとは「デザインプロセスをデザインする」ための素材なのだ。
